var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"error","bitflags::__core","Traits for working with Errors.",null,null],[8,"Error","bitflags::__core::error","Base functionality for all errors in Rust.",null,null],[10,"description","","A short description of the error.",0,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","The lower-level cause of this error, if any.",0,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[0,"prelude","bitflags::__core","The Rust Prelude.",null,null],[0,"v1","bitflags::__core::prelude","The first version of the prelude of The Rust Standard Library.",null,null],[8,"FnOnce","bitflags::__core::prelude::v1","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",1,null],[10,"call_once","","This is called when the call operator is used.",1,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",2,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",3,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",4,null],[5,"drop","","Disposes of a value.",null,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",6,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",7,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",7,null],[10,"into_iter","","Creates an iterator from a value.",7,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",8,{"inputs":[],"output":{"name":"self"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",9,null],[10,"next","","Advances the iterator and returns the next value.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",9,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",9,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",9,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",9,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",9,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",9,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",9,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",9,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",9,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",9,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",9,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"is_ok","core::result","Returns true if the result is `Ok`",10,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",10,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",10,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",10,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",10,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",10,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",10,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",10,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",10,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",10,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",10,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",10,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",10,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",10,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",10,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",10,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",10,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",10,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",10,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"clone","","",10,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"fmt","","",10,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[4,"Result","bitflags::__core::prelude::v1","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",10,null],[13,"Err","","Contains the error value",10,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",11,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",13,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",13,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",13,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",13,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",13,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",13,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",13,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",13,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",13,null],[11,"as_slice","","Extracts a slice containing the entire vector.",13,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",13,null],[11,"set_len","","Sets the length of a vector.",13,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",13,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",13,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",13,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",13,null],[11,"push","","Appends an element to the back of a collection.",13,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",13,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",13,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",13,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",13,null],[11,"len","","Returns the number of elements in the vector.",13,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",13,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",13,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",13,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",13,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",13,null],[11,"from","","",13,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",13,null],[11,"as_mut","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",13,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",13,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",13,null],[11,"cmp","","",13,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"eq","","",13,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",13,null],[11,"extend","","",13,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",13,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",13,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",13,null],[11,"deref","","",13,null],[11,"index_mut","","",13,null],[11,"index_mut","","",13,null],[11,"index_mut","","",13,null],[11,"index_mut","","",13,null],[11,"index_mut","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index","","",13,null],[11,"index_mut","","",13,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",13,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",13,null],[11,"borrow_mut","","",13,null],[11,"borrow","","",13,null],[11,"from","","",13,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[3,"Vec","bitflags::__core::prelude::v1","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",14,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[3,"Box","","A pointer type for heap allocation.",null,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",15,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"ToOwned","","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",16,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",16,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",17,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",18,null],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",19,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",19,null],[8,"SliceConcatExt","","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",20,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",20,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",20,null],[10,"connect","","",20,null],[11,"write_str","collections::string","",21,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",21,{"inputs":[{"name":"string"},{"name":"char"}],"output":{"name":"result"}}],[11,"into","","",21,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"from","","",21,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"as_ref","","",21,null],[11,"as_ref","","",21,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"from_str","","",21,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref_mut","","",21,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"deref","","",21,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index_mut","","",21,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"index","","",21,{"inputs":[{"name":"string"},{"name":"rangetoinclusive"}],"output":{"name":"str"}}],[11,"index","","",21,{"inputs":[{"name":"string"},{"name":"rangeinclusive"}],"output":{"name":"str"}}],[11,"index","","",21,{"inputs":[{"name":"string"},{"name":"rangefull"}],"output":{"name":"str"}}],[11,"index","","",21,{"inputs":[{"name":"string"},{"name":"rangefrom"}],"output":{"name":"str"}}],[11,"index","","",21,{"inputs":[{"name":"string"},{"name":"rangeto"}],"output":{"name":"str"}}],[11,"index","","",21,{"inputs":[{"name":"string"},{"name":"range"}],"output":{"name":"str"}}],[11,"add","","",21,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"string"}}],[11,"hash","","",21,null],[11,"fmt","","",21,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"string"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"string"}}],[11,"eq","","",21,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"string"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"string"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"extend","","",21,null],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",21,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"clone","","",21,{"inputs":[{"name":"string"}],"output":{"name":"string"}}],[11,"clone_from","","",21,null],[11,"new","","Creates a new empty `String`.",21,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",21,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",21,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",21,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",21,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",21,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",21,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",21,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",21,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"as_str","","Extracts a string slice containing the entire string.",21,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"as_mut_str","","Extracts a string slice containing the entire string.",21,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[11,"push_str","","Appends a given string slice onto the end of this `String`.",21,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",21,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",21,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",21,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",21,null],[11,"push","","Appends the given `char` to the end of this `String`.",21,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",21,null],[11,"truncate","","Shortens this `String` to the specified length.",21,null],[11,"pop","","Removes the last character from the string buffer and returns it.",21,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",21,{"inputs":[{"name":"string"},{"name":"usize"}],"output":{"name":"char"}}],[11,"insert","","Inserts a character into this `String` at a byte position.",21,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",21,{"inputs":[{"name":"string"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of this `String`, in bytes.",21,{"inputs":[{"name":"string"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",21,{"inputs":[{"name":"string"}],"output":{"name":"bool"}}],[11,"clear","","Truncates this `String`, removing all contents.",21,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",21,{"inputs":[{"name":"string"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",21,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"partial_cmp","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"option"}}],[11,"lt","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"le","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"gt","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ge","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"bool"}}],[11,"cmp","","",21,{"inputs":[{"name":"string"},{"name":"string"}],"output":{"name":"ordering"}}],[11,"borrow","","",21,{"inputs":[{"name":"string"}],"output":{"name":"str"}}],[3,"String","bitflags::__core::prelude::v1","A UTF-8 encoded, growable string.",null,null],[11,"from_iter","core::option","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",22,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",22,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",22,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"is_some","","Returns `true` if the option is a `Some` value",22,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",22,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",22,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",22,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",22,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",22,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",22,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",22,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",22,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",22,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",22,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"clone","","",22,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",22,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",22,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[4,"Option","bitflags::__core::prelude::v1","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",22,null],[13,"Some","","Some value `T`",22,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",23,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[0,"f32","bitflags::__core","The 32-bit floating point type.",null,null],[17,"MIN_EXP","bitflags::__core::f32","",null,null],[17,"DIGITS","","",null,null],[17,"NAN","","",null,null],[17,"MAX_EXP","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"RADIX","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"MAX","bitflags::__core::f32","Largest finite f32 value",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"INFINITY","","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[0,"f64","bitflags::__core","The 64-bit floating point type.",null,null],[17,"MIN_EXP","bitflags::__core::f64","",null,null],[17,"MAX","","Largest finite f64 value",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[17,"NAN","bitflags::__core::f64","",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX_EXP","","",null,null],[17,"DIGITS","","",null,null],[17,"NEG_INFINITY","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"RADIX","","",null,null],[17,"INFINITY","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[0,"ascii","bitflags::__core","Operations on ASCII strings and characters.",null,null],[8,"AsciiExt","bitflags::__core::ascii","Extension methods for ASCII-subset only operations on string slices.",null,null],[16,"Owned","","Container type for copied ASCII characters.",26,null],[10,"is_ascii","","Checks if the value is within the ASCII range.",26,{"inputs":[{"name":"asciiext"}],"output":{"name":"bool"}}],[10,"to_ascii_uppercase","","Makes a copy of the string in ASCII upper case.",26,null],[10,"to_ascii_lowercase","","Makes a copy of the string in ASCII lower case.",26,null],[10,"eq_ignore_ascii_case","","Checks that two strings are an ASCII case-insensitive match.",26,{"inputs":[{"name":"asciiext"},{"name":"self"}],"output":{"name":"bool"}}],[10,"make_ascii_uppercase","","Converts this type to its ASCII upper case equivalent in-place.",26,null],[10,"make_ascii_lowercase","","Converts this type to its ASCII lower case equivalent in-place.",26,null],[11,"next_back","std::ascii","",27,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"next","","",27,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",27,null],[3,"EscapeDefault","bitflags::__core::ascii","An iterator over the escaped version of a byte, constructed via\n`std::ascii::escape_default`.",null,null],[5,"escape_default","","Returns an iterator that produces an escaped version of a `u8`.",null,{"inputs":[{"name":"u8"}],"output":{"name":"escapedefault"}}],[0,"num","bitflags::__core","Additional functionality for numerics.",null,null],[8,"Zero","bitflags::__core::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",28,{"inputs":[],"output":{"name":"self"}}],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[11,"fmt","core::num","",29,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",29,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[3,"ParseIntError","bitflags::__core::num","An error which can be returned when parsing an integer.",null,null],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",30,{"inputs":[],"output":{"name":"self"}}],[11,"bitand_assign","core::num","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",31,null],[11,"bitand","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",31,null],[11,"bitor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",31,null],[11,"bitxor","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",31,null],[11,"rem","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",31,null],[11,"div","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",31,null],[11,"mul","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",31,null],[11,"sub","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",31,null],[11,"add","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",31,null],[11,"shr","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",31,null],[11,"shl","","",31,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"eq","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"cmp","","",31,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"clone","","",31,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",31,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",31,{"inputs":[],"output":{"name":"wrapping"}}],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",31,null],[11,"clone","core::num","",32,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",32,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"FpCategory","bitflags::__core::num","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",32,null],[13,"Infinite","","Positive or negative infinity",32,null],[13,"Zero","","Positive or negative zero",32,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",32,null],[13,"Normal","","A regular floating point number",32,null],[0,"thread","bitflags::__core","Native threads.",null,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",33,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",33,{"inputs":[{"name":"builder"},{"name":"string"}],"output":{"name":"builder"}}],[11,"stack_size","","Sets the size of the stack for the new thread.",33,{"inputs":[{"name":"builder"},{"name":"usize"}],"output":{"name":"builder"}}],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",33,{"inputs":[{"name":"builder"},{"name":"f"}],"output":{"name":"result"}}],[3,"Builder","bitflags::__core::thread","Thread configuration. Provides detailed control over the properties\nand behavior of new threads.",null,null],[5,"spawn","","Spawns a new thread, returning a `JoinHandle` for it.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[5,"current","","Gets a handle to the thread that invokes it.",null,{"inputs":[],"output":{"name":"thread"}}],[5,"yield_now","","Cooperatively gives up a timeslice to the OS scheduler.",null,null],[5,"panicking","","Determines whether the current thread is unwinding because of panic.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"sleep_ms","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"sleep","","Puts the current thread to sleep for the specified amount of time.",null,null],[5,"park","","Blocks unless or until the current thread&#39;s token is made available.",null,null],[5,"park_timeout_ms","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[5,"park_timeout","","Blocks unless or until the current thread&#39;s token is made available or\nthe specified duration has been reached (may wake spuriously).",null,null],[11,"new","std::thread","",34,{"inputs":[{"name":"option"}],"output":{"name":"thread"}}],[11,"fmt","","",34,{"inputs":[{"name":"thread"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",34,null],[11,"name","","Gets the thread&#39;s name.",34,{"inputs":[{"name":"thread"}],"output":{"name":"option"}}],[11,"clone","","",34,{"inputs":[{"name":"thread"}],"output":{"name":"thread"}}],[3,"Thread","bitflags::__core::thread","A handle to a thread.",null,null],[6,"Result","","",null,null],[11,"thread","std::thread","Extracts a handle to the underlying thread",35,{"inputs":[{"name":"joinhandle"}],"output":{"name":"thread"}}],[11,"join","","Waits for the associated thread to finish.",35,{"inputs":[{"name":"joinhandle"}],"output":{"name":"result"}}],[3,"JoinHandle","bitflags::__core::thread","An owned permission to join on a thread (block on its termination).",null,null],[11,"new","std::thread::local::os","",36,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",36,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[11,"eq","std::thread::local","",37,{"inputs":[{"name":"localkeystate"},{"name":"localkeystate"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"localkeystate"}],"output":{"name":"localkeystate"}}],[4,"LocalKeyState","bitflags::__core::thread","Indicator of the state of a thread local storage key.",null,null],[13,"Uninitialized","","All keys are in this state whenever a thread starts. Keys will\ntransition to the `Valid` state once the first call to `with` happens\nand the initialization expression succeeds.",37,null],[13,"Valid","","Once a key has been accessed successfully, it will enter the `Valid`\nstate. Keys in the `Valid` state will remain so until the thread exits,\nat which point the destructor will be run and the key will enter the\n`Destroyed` state.",37,null],[13,"Destroyed","","When a thread exits, the destructors for keys will be run (if\nnecessary). While a destructor is running, and possibly after a\ndestructor has run, a key is in the `Destroyed` state.",37,null],[11,"new","std::thread::scoped_tls::imp","",38,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",38,null],[11,"get","","",38,null],[3,"KeyInner","bitflags::__core::thread","",null,null],[11,"with","std::thread::local","Acquires a reference to the value in this TLS key.",39,{"inputs":[{"name":"localkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"state","","Query the current state of this key.",39,{"inputs":[{"name":"localkey"}],"output":{"name":"localkeystate"}}],[3,"LocalKey","bitflags::__core::thread","A thread local storage key which owns its contents.",null,null],[11,"new","std::thread::local::elf","",40,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",40,{"inputs":[{"name":"key"}],"output":{"name":"option"}}],[3,"Key","bitflags::__core::thread","",null,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",41,{"inputs":[{"name":"scopedkey"},{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[11,"with","","Gets a value out of this scoped variable.",41,{"inputs":[{"name":"scopedkey"},{"name":"f"}],"output":{"name":"r"}}],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",41,{"inputs":[{"name":"scopedkey"}],"output":{"name":"bool"}}],[3,"ScopedKey","bitflags::__core::thread","Type representing a thread local storage key corresponding to a reference\nto the type parameter `T`.",null,null],[0,"collections","bitflags::__core","Collection types.",null,null],[0,"hash_map","bitflags::__core::collections","A hashmap",null,null],[3,"Values","bitflags::__core::collections::hash_map","HashMap values iterator.",null,null],[3,"RandomState","","`RandomState` is the default state for `HashMap` types.",null,null],[3,"VacantEntry","","A view into a single empty location in a HashMap.",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",42,null],[13,"Vacant","","A vacant Entry.",42,null],[3,"IntoIter","","HashMap move iterator.",null,null],[3,"Iter","","HashMap iterator.",null,null],[3,"IterMut","","HashMap mutable values iterator.",null,null],[3,"HashMap","","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a HashMap.",null,null],[3,"Keys","","HashMap keys iterator.",null,null],[3,"Drain","","HashMap drain iterator.",null,null],[0,"hash_set","bitflags::__core::collections","A hashset",null,null],[3,"Intersection","bitflags::__core::collections::hash_set","Intersection iterator",null,null],[3,"IntoIter","","HashSet move iterator",null,null],[3,"Iter","","HashSet iterator",null,null],[3,"HashSet","","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[3,"SymmetricDifference","","Symmetric difference iterator.",null,null],[3,"Union","","Set union iterator.",null,null],[3,"Difference","","Difference iterator",null,null],[3,"Drain","","HashSet drain iterator",null,null],[0,"binary_heap","bitflags::__core::collections","A priority queue implemented with a binary heap.",null,null],[11,"extend","collections::binary_heap","",43,null],[11,"extend","","",43,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",43,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"from","","",43,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",43,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",43,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"iter"}}],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",43,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",43,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",43,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"option"}}],[11,"push","","Pushes an item onto the binary heap.",43,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",43,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"t"}}],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",43,{"inputs":[{"name":"binaryheap"},{"name":"t"}],"output":{"name":"option"}}],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"len","","Returns the length of the binary heap.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"usize"}}],[11,"is_empty","","Checks if the binary heap is empty.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"drain"}}],[11,"clear","","Drops all items from the binary heap.",43,null],[11,"fmt","","",43,{"inputs":[{"name":"binaryheap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"clone","","",43,{"inputs":[{"name":"binaryheap"}],"output":{"name":"binaryheap"}}],[11,"clone_from","","",43,null],[3,"BinaryHeap","bitflags::__core::collections::binary_heap","A priority queue implemented with a binary heap.",null,null],[11,"next_back","collections::binary_heap","",44,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",44,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"clone","","",44,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::binary_heap","`BinaryHeap` iterator.",null,null],[11,"next_back","collections::binary_heap","",45,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",45,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[3,"IntoIter","bitflags::__core::collections::binary_heap","An iterator that moves out of a `BinaryHeap`.",null,null],[11,"next_back","collections::binary_heap","",46,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",46,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[3,"Drain","bitflags::__core::collections::binary_heap","An iterator that drains a `BinaryHeap`.",null,null],[0,"linked_list","bitflags::__core::collections","A doubly-linked list with owned nodes.",null,null],[11,"hash","collections::linked_list","",47,null],[11,"fmt","","",47,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"cmp","","",47,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",47,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"eq","","",47,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"extend","","",47,null],[11,"extend","","",47,null],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",47,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"drop","","",47,null],[11,"new","","Creates an empty `LinkedList`.",47,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",47,null],[11,"iter","","Provides a forward iterator.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"iter"}}],[11,"iter_mut","","Provides a forward iterator with mutable references.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"itermut"}}],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Returns the length of the `LinkedList`.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"clear","","Removes all elements from the `LinkedList`.",47,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_front","","Adds an element first in the list.",47,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"push_back","","Appends an element to the back of a list",47,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",47,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"linkedlist"}}],[11,"front_place","","Returns a place for insertion at the front of the list.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"frontplace"}}],[11,"back_place","","Returns a place for insertion at the back of the list.",47,{"inputs":[{"name":"linkedlist"}],"output":{"name":"backplace"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"linkedlist"}}],[3,"LinkedList","bitflags::__core::collections::linked_list","A doubly-linked list.",null,null],[11,"next_back","collections::linked_list","",48,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",48,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::linked_list","An iterator over references to the items of a `LinkedList`.",null,null],[11,"insert_next","collections::linked_list","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",49,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",49,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",49,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",49,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[3,"IterMut","bitflags::__core::collections::linked_list","An iterator over mutable references to the items of a `LinkedList`.",null,null],[11,"next_back","collections::linked_list","",50,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",50,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",50,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::linked_list","An iterator over the items of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",51,null],[11,"pointer","","",51,null],[11,"make_place","","",51,{"inputs":[{"name":"frontplace"}],"output":{"name":"frontplace"}}],[3,"FrontPlace","bitflags::__core::collections::linked_list","A place for insertion at the front of a `LinkedList`.",null,null],[11,"finalize","collections::linked_list","",52,null],[11,"pointer","","",52,null],[11,"make_place","","",52,{"inputs":[{"name":"backplace"}],"output":{"name":"backplace"}}],[3,"BackPlace","bitflags::__core::collections::linked_list","A place for insertion at the back of a `LinkedList`.",null,null],[3,"HashMap","bitflags::__core::collections","A hash map implementation which uses linear probing with Robin\nHood bucket stealing.",null,null],[0,"vec_deque","","VecDeque is a double-ended queue, which is implemented with the help of a\ngrowing ring buffer.",null,null],[11,"fmt","collections::vec_deque","",53,{"inputs":[{"name":"vecdeque"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"extend","","",53,null],[11,"extend","","",53,null],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",53,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"index_mut","","",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"index","","",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"a"}}],[11,"hash","","",53,null],[11,"cmp","","",53,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"eq","","",53,{"inputs":[{"name":"vecdeque"},{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"default","","",53,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"drop","","",53,null],[11,"clone","","",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vecdeque"}}],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",53,null],[11,"new","","Creates an empty `VecDeque`.",53,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",53,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap","","Swaps elements at indices `i` and `j`.",53,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",53,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",53,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",53,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",53,null],[11,"iter","","Returns a front-to-back iterator.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"itermut"}}],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",53,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",53,null],[11,"len","","Returns the number of elements in the `VecDeque`.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the buffer contains no elements",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"bool"}}],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",53,{"inputs":[{"name":"vecdeque"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the buffer, removing all values.",53,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"push_front","","Inserts an element first in the sequence.",53,null],[11,"push_back","","Appends an element to the back of a buffer",53,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",53,{"inputs":[{"name":"vecdeque"}],"output":{"name":"option"}}],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",53,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"option"}}],[11,"split_off","","Splits the collection into two at the given index.",53,{"inputs":[{"name":"vecdeque"},{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",53,null],[11,"retain","","Retains only the elements specified by the predicate.",53,null],[3,"VecDeque","bitflags::__core::collections::vec_deque","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[11,"next_back","collections::vec_deque","",54,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"clone","","",54,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::vec_deque","`VecDeque` iterator.",null,null],[11,"next_back","collections::vec_deque","",55,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",55,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[3,"IterMut","bitflags::__core::collections::vec_deque","`VecDeque` mutable iterator.",null,null],[11,"next_back","collections::vec_deque","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"clone","","",56,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[3,"IntoIter","bitflags::__core::collections::vec_deque","A by-value VecDeque iterator",null,null],[11,"next_back","collections::vec_deque","",57,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",57,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"drop","","",57,null],[3,"Drain","bitflags::__core::collections::vec_deque","A draining VecDeque iterator",null,null],[3,"VecDeque","bitflags::__core::collections","`VecDeque` is a growable ring buffer, which can be used as a double-ended\nqueue efficiently.",null,null],[0,"btree_set","","",null,null],[11,"next","collections::btree::set","",58,{"inputs":[{"name":"union"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",58,{"inputs":[{"name":"union"}],"output":{"name":"union"}}],[3,"Union","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set union (in-order).",null,null],[11,"next","collections::btree::set","",59,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"clone","","",59,{"inputs":[{"name":"symmetricdifference"}],"output":{"name":"symmetricdifference"}}],[3,"SymmetricDifference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set symmetric difference (in-order).",null,null],[11,"fmt","collections::btree::set","",60,{"inputs":[{"name":"btreeset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",60,{"inputs":[],"output":{"name":"btreeset"}}],[11,"extend","","",60,null],[11,"extend","","",60,null],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",60,{"inputs":[{"name":"btreeset"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",60,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"difference","","Visits the values representing the difference, in ascending order.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"difference"}}],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"symmetricdifference"}}],[11,"intersection","","Visits the values representing the intersection, in ascending order.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"intersection"}}],[11,"union","","Visits the values representing the union, in ascending order.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"union"}}],[11,"len","","Returns the number of elements in the set.",60,{"inputs":[{"name":"btreeset"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the set contains no elements.",60,{"inputs":[{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"clear","","Clears the set, removing all values.",60,null],[11,"contains","","Returns `true` if the set contains a value.",60,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",60,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_subset","","Returns `true` if the set is a subset of another.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"is_superset","","Returns `true` if the set is a superset of another.",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"insert","","Adds a value to the set.",60,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"bool"}}],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",60,{"inputs":[{"name":"btreeset"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",60,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"bool"}}],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",60,{"inputs":[{"name":"btreeset"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",60,{"inputs":[{"name":"btreeset"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",60,{"inputs":[{"name":"btreeset"}],"output":{"name":"iter"}}],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",60,{"inputs":[],"output":{"name":"btreeset"}}],[11,"clone","","",60,{"inputs":[{"name":"btreeset"}],"output":{"name":"btreeset"}}],[11,"hash","","",60,null],[11,"eq","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"cmp","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"btreeset"},{"name":"btreeset"}],"output":{"name":"bool"}}],[3,"BTreeSet","bitflags::__core::collections::btree_set","A set based on a B-Tree.",null,null],[11,"len","collections::btree::set","",61,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"clone","","",61,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[3,"Iter","bitflags::__core::collections::btree_set","An iterator over a BTreeSet&#39;s items.",null,null],[11,"next","collections::btree::set","",62,{"inputs":[{"name":"difference"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",62,{"inputs":[{"name":"difference"}],"output":{"name":"difference"}}],[3,"Difference","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set difference (in-order).",null,null],[11,"next","collections::btree::set","",63,{"inputs":[{"name":"intersection"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"clone","","",63,{"inputs":[{"name":"intersection"}],"output":{"name":"intersection"}}],[3,"Intersection","bitflags::__core::collections::btree_set","A lazy iterator producing elements in the set intersection (in-order).",null,null],[11,"len","collections::btree::set","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[3,"IntoIter","bitflags::__core::collections::btree_set","An owning iterator over a BTreeSet&#39;s items.",null,null],[11,"next_back","collections::btree::set","",65,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",65,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[3,"Range","bitflags::__core::collections::btree_set","An iterator over a sub-range of BTreeSet&#39;s items.",null,null],[3,"HashSet","bitflags::__core::collections","An implementation of a hash set using the underlying representation of a\nHashMap where the value is ().",null,null],[11,"iter","collections::btree::map","Gets an iterator over the entries of the map, sorted by key.",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"len","","Returns the number of elements in the map.",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"index","","",66,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"fmt","","",66,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",66,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",66,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"eq","","",66,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"default","","",66,{"inputs":[],"output":{"name":"btreemap"}}],[11,"hash","","",66,null],[11,"extend","","",66,null],[11,"extend","","",66,null],[11,"from_iter","","",66,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"new","","Makes a new empty BTreeMap with a reasonable choice for B.",66,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",66,null],[11,"get","","Returns a reference to the value corresponding to the key.",66,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",66,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",66,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",66,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",66,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",66,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",66,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",66,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"clone","","",66,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"drop","","",66,null],[3,"BTreeMap","bitflags::__core::collections","A map based on a B-Tree.",null,null],[0,"btree_map","","",null,null],[11,"key","collections::btree::map","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",67,{"inputs":[{"name":"vacantentry"}],"output":{"name":"k"}}],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",67,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[3,"VacantEntry","bitflags::__core::collections::btree_map","A vacant Entry.",null,null],[11,"clone","collections::btree::map","",68,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"len","","",68,{"inputs":[{"name":"keys"}],"output":{"name":"usize"}}],[11,"next_back","","",68,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",68,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[3,"Keys","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s keys.",null,null],[11,"len","collections::btree::map","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[11,"next_back","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",69,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"drop","","",69,null],[3,"IntoIter","bitflags::__core::collections::btree_map","An owning iterator over a BTreeMap&#39;s entries.",null,null],[11,"or_insert","collections::btree::map","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",70,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",70,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[4,"Entry","bitflags::__core::collections::btree_map","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",70,null],[13,"Occupied","","An occupied Entry",70,null],[11,"key","collections::btree::map","Gets a reference to the key in the entry.",71,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"k"}}],[11,"get","","Gets a reference to the value in the entry.",71,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",71,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",71,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",71,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",71,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[3,"OccupiedEntry","bitflags::__core::collections::btree_map","An occupied Entry.",null,null],[11,"next_back","collections::btree::map","",72,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[11,"next","","",72,{"inputs":[{"name":"rangemut"}],"output":{"name":"option"}}],[3,"RangeMut","bitflags::__core::collections::btree_map","A mutable iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",73,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"len","","",73,{"inputs":[{"name":"values"}],"output":{"name":"usize"}}],[11,"next_back","","",73,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[3,"Values","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s values.",null,null],[11,"clone","collections::btree::map","",74,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"len","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"next_back","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[3,"Iter","bitflags::__core::collections::btree_map","An iterator over a BTreeMap&#39;s entries.",null,null],[11,"clone","collections::btree::map","",75,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next_back","","",75,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::collections::btree_map","An iterator over a sub-range of BTreeMap&#39;s entries.",null,null],[11,"len","collections::btree::map","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"next_back","","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[3,"IterMut","bitflags::__core::collections::btree_map","A mutable iterator over a BTreeMap&#39;s entries.",null,null],[3,"BTreeMap","","A map based on a B-Tree.",null,null],[3,"BTreeSet","bitflags::__core::collections","A set based on a B-Tree.",null,null],[3,"BinaryHeap","","A priority queue implemented with a binary heap.",null,null],[11,"clone","collections","",77,{"inputs":[{"name":"bound"}],"output":{"name":"bound"}}],[11,"fmt","","",77,{"inputs":[{"name":"bound"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"eq","","",77,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[11,"ne","","",77,{"inputs":[{"name":"bound"},{"name":"bound"}],"output":{"name":"bool"}}],[4,"Bound","bitflags::__core::collections","An endpoint of a range of keys.",null,null],[13,"Included","","An inclusive bound.",77,null],[13,"Excluded","","An exclusive bound.",77,null],[13,"Unbounded","","An infinite endpoint. Indicates that there is no bound in this direction.",77,null],[3,"LinkedList","","A doubly-linked list.",null,null],[0,"env","bitflags::__core","Inspection and manipulation of the process&#39;s environment.",null,null],[5,"current_dir","bitflags::__core::env","Returns the current working directory as a `PathBuf`.",null,{"inputs":[],"output":{"name":"result"}}],[5,"set_current_dir","","Changes the current working directory to the specified path, returning\nwhether the change was completed successfully or not.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[3,"Vars","","An iterator over a snapshot of the environment variables of this process.",null,null],[3,"VarsOs","","An iterator over a snapshot of the environment variables of this process.",null,null],[5,"vars","","Returns an iterator of (variable, value) pairs of strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"vars"}}],[5,"vars_os","","Returns an iterator of (variable, value) pairs of OS strings, for all the\nenvironment variables of the current process.",null,{"inputs":[],"output":{"name":"varsos"}}],[5,"var","","Fetches the environment variable `key` from the current process.",null,{"inputs":[{"name":"k"}],"output":{"name":"result"}}],[5,"var_os","","Fetches the environment variable `key` from the current process, returning\nNone if the variable isn&#39;t set.",null,{"inputs":[{"name":"k"}],"output":{"name":"option"}}],[4,"VarError","","Possible errors from the `env::var` method.",null,null],[13,"NotPresent","","The specified environment variable was not present in the current\nprocess&#39;s environment.",78,null],[13,"NotUnicode","","The specified environment variable was found, but it did not contain\nvalid unicode data. The found data is returned as a payload of this\nvariant.",78,null],[5,"set_var","","Sets the environment variable `k` to the value `v` for the currently running\nprocess.",null,null],[5,"remove_var","","Removes an environment variable from the environment of the currently running process.",null,null],[3,"SplitPaths","","An iterator over `PathBuf` instances for parsing an environment variable\naccording to platform-specific conventions.",null,null],[5,"split_paths","","Parses input according to platform conventions for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"t"}],"output":{"name":"splitpaths"}}],[3,"JoinPathsError","","Error type returned from `std::env::join_paths` when paths fail to be\njoined.",null,null],[5,"join_paths","","Joins a collection of `Path`s appropriately for the `PATH`\nenvironment variable.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"home_dir","","Returns the path to the current user&#39;s home directory if known.",null,{"inputs":[],"output":{"name":"option"}}],[5,"temp_dir","","Returns the path to a temporary directory.",null,{"inputs":[],"output":{"name":"pathbuf"}}],[5,"current_exe","","Returns the full filesystem path to the current running executable.",null,{"inputs":[],"output":{"name":"result"}}],[3,"Args","","An iterator over the arguments of a process, yielding a `String` value\nfor each argument.",null,null],[3,"ArgsOs","","An iterator over the arguments of a process, yielding an `OsString` value\nfor each argument.",null,null],[5,"args","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"args"}}],[5,"args_os","","Returns the arguments which this program was started with (normally passed\nvia the command line).",null,{"inputs":[],"output":{"name":"argsos"}}],[0,"consts","","Constants associated with the current target",null,null],[17,"ARCH","bitflags::__core::env::consts","A string describing the architecture of the CPU that is currently\nin use.",null,null],[17,"FAMILY","","The family of the operating system. In this case, `unix`.",null,null],[17,"OS","","A string describing the specific operating system in use: in this\ncase, `linux`.",null,null],[17,"DLL_PREFIX","","Specifies the filename prefix used for shared libraries on this\nplatform: in this case, `lib`.",null,null],[17,"DLL_SUFFIX","","Specifies the filename suffix used for shared libraries on this\nplatform: in this case, `.so`.",null,null],[17,"DLL_EXTENSION","","Specifies the file extension used for shared libraries on this\nplatform that goes after the dot: in this case, `so`.",null,null],[17,"EXE_SUFFIX","","Specifies the filename suffix used for executable binaries on this\nplatform: in this case, the empty string.",null,null],[17,"EXE_EXTENSION","","Specifies the file extension, if any, used for executable binaries\non this platform: in this case, the empty string.",null,null],[0,"ffi","bitflags::__core","Utilities related to FFI bindings.",null,null],[3,"NulError","bitflags::__core::ffi","An error returned from `CString::new` to indicate that a nul byte was found\nin the vector provided.",null,null],[3,"CString","","A type representing an owned C-compatible string",null,null],[3,"CStr","","Representation of a borrowed C string.",null,null],[3,"OsString","","A type that can represent owned, mutable platform-native strings, but is\ncheaply inter-convertible with Rust strings.",null,null],[3,"OsStr","","Slices into OS strings (see `OsString`).",null,null],[3,"IntoStringError","","An error returned from `CString::into_string` to indicate that a UTF-8 error\nwas encountered during the conversion.",null,null],[0,"fs","bitflags::__core","Filesystem manipulation operations.",null,null],[3,"File","bitflags::__core::fs","A reference to an open file on the filesystem.",null,null],[3,"Metadata","","Metadata information about a file.",null,null],[3,"ReadDir","","Iterator over the entries in a directory.",null,null],[3,"DirEntry","","Entries returned by the `ReadDir` iterator.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Permissions","","Representation of the various permissions on a file.",null,null],[3,"FileType","","An structure representing a type of file with accessors for each file type.",null,null],[3,"DirBuilder","","A builder used to create directories in various manners.",null,null],[5,"remove_file","","Removes a file from the filesystem.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"metadata","","Given a path, query the file system to get information about a file,\ndirectory, etc.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"symlink_metadata","","Query the metadata about a file without following symlinks.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename","","Rename a file or directory to a new name.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"copy","","Copies the contents of one file to another. This function will also\ncopy the permission bits of the original file to the destination file.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"hard_link","","Creates a new hard link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"soft_link","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[5,"read_link","","Reads a symbolic link, returning the file that the link points to.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","Returns the canonical form of a path with all intermediate components\nnormalized and symbolic links resolved.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","Creates a new, empty directory at the provided path",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","Recursively create a directory and all of its parent components if they\nare missing.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","Removes an existing, empty directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","Removes a directory at this path, after removing all its contents. Use\ncarefully!",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"read_dir","","Returns an iterator over the entries within a directory.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"set_permissions","","Changes the permissions found on a file or a directory.",null,{"inputs":[{"name":"p"},{"name":"permissions"}],"output":{"name":"result"}}],[0,"io","bitflags::__core","Traits, helpers, and type definitions for core I/O functionality.",null,null],[0,"prelude","bitflags::__core::io","The I/O Prelude",null,null],[8,"BufRead","bitflags::__core::io::prelude","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",79,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",79,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",79,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",79,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",79,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",79,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",80,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",80,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",80,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",80,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",80,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",80,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",80,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",80,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",80,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",81,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",82,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",82,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",82,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",82,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",82,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Read","bitflags::__core::io","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",80,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",80,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",80,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",80,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",80,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",80,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",80,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",80,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",80,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",82,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",82,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",82,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",82,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",82,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[8,"Seek","","The `Seek` trait provides a cursor which can be moved within a stream of\nbytes.",null,null],[10,"seek","","Seek to an offset, in bytes, in a stream.",81,{"inputs":[{"name":"seek"},{"name":"seekfrom"}],"output":{"name":"result"}}],[4,"SeekFrom","","Enumeration of possible methods to seek within an I/O object.",null,null],[13,"Start","","Set the offset to the provided number of bytes.",83,null],[13,"End","","Set the offset to the size of this object plus the specified number of\nbytes.",83,null],[13,"Current","","Set the offset to the current position plus the specified number of\nbytes.",83,null],[8,"BufRead","","A `BufRead` is a type of `Read`er which has an internal buffer, allowing it\nto perform extra ways of reading.",null,null],[10,"fill_buf","","Fills the internal buffer of this object, returning the buffer contents.",79,{"inputs":[{"name":"bufread"}],"output":{"name":"result"}}],[10,"consume","","Tells this buffer that `amt` bytes have been consumed from the buffer,\nso they should no longer be returned in calls to `read`.",79,null],[11,"read_until","","Read all bytes into `buf` until the delimiter `byte` is reached.",79,{"inputs":[{"name":"bufread"},{"name":"u8"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_line","","Read all bytes until a newline (the 0xA byte) is reached, and append\nthem to the provided buffer.",79,{"inputs":[{"name":"bufread"},{"name":"string"}],"output":{"name":"result"}}],[11,"split","","Returns an iterator over the contents of this reader split on the byte\n`byte`.",79,{"inputs":[{"name":"bufread"},{"name":"u8"}],"output":{"name":"split"}}],[11,"lines","","Returns an iterator over the lines of this reader.",79,{"inputs":[{"name":"bufread"}],"output":{"name":"lines"}}],[3,"Chain","","Adaptor to chain together two readers.",null,null],[3,"Take","","Reader adaptor which limits the bytes read from an underlying reader.",null,null],[3,"Bytes","","An iterator over `u8` values of a reader.",null,null],[3,"Chars","","An iterator over the `char`s of a reader.",null,null],[4,"CharsError","","An enumeration of possible errors that can be generated from the `Chars`\nadapter.",null,null],[13,"NotUtf8","","Variant representing that the underlying stream was read successfully\nbut it did not contain valid utf8 data.",84,null],[13,"Other","","Variant representing that an I/O error occurred.",84,null],[3,"Split","","An iterator over the contents of an instance of `BufRead` split on a\nparticular byte.",null,null],[3,"Lines","","An iterator over the lines of an instance of `BufRead`.",null,null],[5,"empty","","Constructs a new handle to an empty reader.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"BufWriter","","Wraps a writer and buffers its output.",null,null],[3,"Error","","The error type for I/O operations of the `Read`, `Write`, `Seek`, and\nassociated traits.",null,null],[5,"repeat","","Creates an instance of a reader that infinitely repeats one byte.",null,{"inputs":[{"name":"u8"}],"output":{"name":"repeat"}}],[5,"copy","","Copies the entire contents of a reader into a writer.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"result"}}],[6,"Result","","",null,null],[3,"Empty","","A reader which is always at EOF.",null,null],[5,"sink","","Creates an instance of a writer which will successfully consume all data.",null,{"inputs":[],"output":{"name":"sink"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the global standard output stream of the current process.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",85,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",85,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",85,null],[13,"ConnectionReset","","The connection was reset by the remote server.",85,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",85,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",85,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in\nuse elsewhere.",85,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not\nlocal.",85,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",85,null],[13,"AlreadyExists","","An entity already exists, often a file.",85,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was\nrequested to not occur.",85,null],[13,"InvalidInput","","A parameter was incorrect.",85,null],[13,"InvalidData","","Data not valid for the operation were encountered.",85,null],[13,"TimedOut","","The I/O operation&#39;s timeout expired, causing it to be canceled.",85,null],[13,"WriteZero","","An error returned when an operation could not be completed because a\ncall to `write` returned `Ok(0)`.",85,null],[13,"Interrupted","","This operation was interrupted.",85,null],[13,"Other","","Any I/O error not part of this list.",85,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an\n&quot;end of file&quot; was reached prematurely.",85,null],[3,"StdinLock","","A locked reference to the `Stdin` handle.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Repeat","","A reader which yields one byte over and over and over and over and over and...",null,null],[3,"LineWriter","","Wraps a writer and buffers output to it, flushing whenever a newline\n(`0x0a`, `&#39;\\n&#39;`) is detected.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"BufReader","","The `BufReader` struct adds buffering to any reader.",null,null],[3,"StderrLock","","A locked reference to the `Stderr` handle.",null,null],[3,"IntoInnerError","","An error returned by `into_inner` which combines an error that\nhappened while writing out the buffer, and the buffered writer object\nwhich may be used to recover from the condition.",null,null],[3,"Sink","","A writer which will move data into the void.",null,null],[3,"Cursor","","A `Cursor` wraps another type and provides it with a\n[`Seek`](trait.Seek.html) implementation.",null,null],[3,"StdoutLock","","A locked reference to the `Stdout` handle.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"net","bitflags::__core","Networking primitives for TCP/UDP communication.",null,null],[4,"Shutdown","bitflags::__core::net","Possible values which can be passed to the `shutdown` method of `TcpStream`.",null,null],[13,"Read","","Indicates that the reading portion of this stream/socket should be shut\ndown. All currently blocked and future reads will return `Ok(0)`.",86,null],[13,"Write","","Indicates that the writing portion of this stream/socket should be shut\ndown. All currently blocked and future writes will return an error.",86,null],[13,"Both","","Shut down both the reading and writing portions of this stream.",86,null],[3,"LookupHost","","An iterator over `SocketAddr` values returned from a host lookup operation.",null,null],[5,"lookup_host","","Resolve the host specified by `host` as a number of `SocketAddr` instances.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[4,"Ipv6MulticastScope","","",null,null],[13,"InterfaceLocal","","",87,null],[13,"LinkLocal","","",87,null],[13,"RealmLocal","","",87,null],[13,"AdminLocal","","",87,null],[13,"SiteLocal","","",87,null],[13,"OrganizationLocal","","",87,null],[13,"Global","","",87,null],[4,"IpAddr","","An IP address, either an IPv4 or IPv6 address.",null,null],[13,"V4","","Representation of an IPv4 address.",88,null],[13,"V6","","Representation of an IPv6 address.",88,null],[3,"SocketAddrV4","","An IPv4 socket address which is a (ip, port) combination.",null,null],[3,"Incoming","","An infinite iterator over the connections from a `TcpListener`.",null,null],[3,"Ipv4Addr","","Representation of an IPv4 address.",null,null],[3,"Ipv6Addr","","Representation of an IPv6 address.",null,null],[4,"SocketAddr","","Representation of a socket address for networking applications.",null,null],[13,"V4","","An IPv4 socket address which is a (ip, port) combination.",89,null],[13,"V6","","An IPv6 socket address",89,null],[3,"AddrParseError","","An error returned when parsing an IP address or a socket address.",null,null],[3,"TcpListener","","A structure representing a socket server.",null,null],[3,"TcpStream","","A structure which represents a TCP stream between a local socket and a\nremote socket.",null,null],[3,"UdpSocket","","A User Datagram Protocol socket.",null,null],[8,"ToSocketAddrs","","A trait for objects which can be converted or resolved to one or more\n`SocketAddr` values.",null,null],[16,"Iter","","Returned iterator over socket addresses which this type may correspond\nto.",90,null],[10,"to_socket_addrs","","Converts this object to an iterator of resolved `SocketAddr`s.",90,{"inputs":[{"name":"tosocketaddrs"}],"output":{"name":"result"}}],[3,"SocketAddrV6","","An IPv6 socket address.",null,null],[0,"os","bitflags::__core","OS-specific functionality.",null,null],[0,"linux","bitflags::__core::os","Linux-specific definitions",null,null],[0,"raw","bitflags::__core::os::linux","Linux-specific raw type definitions",null,null],[6,"dev_t","bitflags::__core::os::linux::raw","",null,null],[6,"mode_t","","",null,null],[6,"pthread_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"off_t","","",null,null],[3,"stat","","",null,null],[12,"st_dev","","",91,null],[12,"st_ino","","",91,null],[12,"st_nlink","","",91,null],[12,"st_mode","","",91,null],[12,"st_uid","","",91,null],[12,"st_gid","","",91,null],[12,"__pad0","","",91,null],[12,"st_rdev","","",91,null],[12,"st_size","","",91,null],[12,"st_blksize","","",91,null],[12,"st_blocks","","",91,null],[12,"st_atime","","",91,null],[12,"st_atime_nsec","","",91,null],[12,"st_mtime","","",91,null],[12,"st_mtime_nsec","","",91,null],[12,"st_ctime","","",91,null],[12,"st_ctime_nsec","","",91,null],[12,"__unused","","",91,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[0,"fs","bitflags::__core::os::linux","",null,null],[8,"MetadataExt","bitflags::__core::os::linux::fs","OS-specific extension methods for `fs::Metadata`",null,null],[10,"as_raw_stat","","Gain a reference to the underlying `stat` structure which contains\nthe raw information returned by the OS.",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"stat"}}],[10,"st_dev","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_ino","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_mode","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_nlink","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_uid","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_gid","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"st_rdev","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_size","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_atime","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_atime_nsec","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_mtime_nsec","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_ctime_nsec","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"st_blksize","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"st_blocks","","",92,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[0,"raw","bitflags::__core::os","Raw OS-specific types for the current platform/architecture",null,null],[6,"c_char","bitflags::__core::os::raw","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[4,"c_void","","Type used to construct void pointers for use with C.",null,null],[0,"ext","bitflags::__core::os","Experimental extensions to `std` for Unix platforms.",null,null],[0,"io","bitflags::__core::os::ext","Unix-specific extensions to general I/O primitives",null,null],[6,"RawFd","bitflags::__core::os::ext::io","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",93,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"FromRawFd","","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",94,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",95,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[0,"ffi","bitflags::__core::os::ext","Unix-specific extension to the primitives in the `std::ffi` module",null,null],[8,"OsStringExt","bitflags::__core::os::ext::ffi","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",96,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",96,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",97,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",97,null],[0,"fs","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::fs` module.",null,null],[8,"PermissionsExt","bitflags::__core::os::ext::fs","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",98,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",98,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",98,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",99,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",99,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",102,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[5,"symlink","","Creates a new symbolic link on the filesystem.",null,{"inputs":[{"name":"p"},{"name":"q"}],"output":{"name":"result"}}],[8,"DirBuilderExt","","An extension trait for `fs::DirBuilder` for unix-specific options.",null,null],[10,"mode","","Sets the mode to create new directories with. This option defaults to\n0o777.",103,{"inputs":[{"name":"dirbuilderext"},{"name":"u32"}],"output":{"name":"self"}}],[0,"process","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[8,"CommandExt","bitflags::__core::os::ext::process","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",104,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",104,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",104,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",104,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",104,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",105,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[0,"raw","bitflags::__core::os::ext","Unix-specific primitives available on all unix platforms",null,null],[6,"uid_t","bitflags::__core::os::ext::raw","",null,null],[6,"gid_t","","",null,null],[6,"pid_t","","",null,null],[6,"blksize_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino_t","","",null,null],[6,"time_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"off_t","","",null,null],[6,"pthread_t","","",null,null],[6,"dev_t","","",null,null],[6,"nlink_t","","",null,null],[0,"thread","bitflags::__core::os::ext","Unix-specific extensions to primitives in the `std::process` module.",null,null],[6,"RawPthread","bitflags::__core::os::ext::thread","",null,null],[8,"JoinHandleExt","","Unix-specific extensions to `std::thread::JoinHandle`",null,null],[10,"as_pthread_t","","Extracts the raw pthread_t without taking ownership",106,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[10,"into_pthread_t","","Consumes the thread, returning the raw pthread_t",106,{"inputs":[{"name":"joinhandleext"}],"output":{"name":"u64"}}],[0,"net","bitflags::__core::os::ext","Unix-specific networking functionality",null,null],[3,"SocketAddr","bitflags::__core::os::ext::net","An address associated with a Unix socket.",null,null],[3,"UnixStream","","A Unix stream socket.",null,null],[3,"UnixListener","","A structure representing a Unix domain socket server.",null,null],[3,"Incoming","","An iterator over incoming connections to a `UnixListener`.",null,null],[3,"UnixDatagram","","A Unix datagram socket.",null,null],[0,"prelude","bitflags::__core::os::ext","A prelude for conveniently writing platform-specific code.",null,null],[8,"FromRawFd","bitflags::__core::os::ext::prelude","A trait to express the ability to construct an object from a raw file\ndescriptor.",null,null],[10,"from_raw_fd","","Constructs a new instances of `Self` from the given raw file\ndescriptor.",94,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[8,"MetadataExt","","",null,null],[10,"dev","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"ino","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"mode","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"nlink","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"uid","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"gid","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u32"}}],[10,"rdev","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"size","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"atime","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"atime_nsec","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"mtime_nsec","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"ctime_nsec","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"i64"}}],[10,"blksize","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[10,"blocks","","",100,{"inputs":[{"name":"metadataext"}],"output":{"name":"u64"}}],[8,"PermissionsExt","","Unix-specific extensions to `Permissions`",null,null],[10,"mode","","Returns the underlying raw `mode_t` bits that are the standard Unix\npermissions for this file.",98,{"inputs":[{"name":"permissionsext"}],"output":{"name":"u32"}}],[10,"set_mode","","Sets the underlying raw bits for this set of permissions.",98,null],[10,"from_mode","","Creates a new instance of `Permissions` from the given set of Unix\npermission bits.",98,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[6,"RawFd","","",null,null],[8,"AsRawFd","","A trait to extract the raw unix file descriptor from an underlying\nobject.",null,null],[10,"as_raw_fd","","Extracts the raw file descriptor.",93,{"inputs":[{"name":"asrawfd"}],"output":{"name":"i32"}}],[8,"OsStrExt","","Unix-specific extensions to `OsStr`.",null,null],[10,"from_bytes","","",97,null],[10,"as_bytes","","Gets the underlying byte view of the `OsStr` slice.",97,null],[8,"CommandExt","","Unix-specific extensions to the `std::process::Command` builder",null,null],[10,"uid","","Sets the child process&#39;s user id. This translates to a\n`setuid` call in the child process. Failure in the `setuid`\ncall will cause the spawn to fail.",104,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"gid","","Similar to `uid`, but sets the group id of the child process. This has\nthe same semantics as the `uid` field.",104,{"inputs":[{"name":"commandext"},{"name":"u32"}],"output":{"name":"command"}}],[10,"session_leader","","Create a new session (cf. `setsid(2)`) for the child process. This means\nthat the child is the leader of a new process group. The parent process\nremains the child reaper of the new process.",104,{"inputs":[{"name":"commandext"},{"name":"bool"}],"output":{"name":"command"}}],[10,"before_exec","","Schedules a closure to be run just before the `exec` function is\ninvoked.",104,{"inputs":[{"name":"commandext"},{"name":"f"}],"output":{"name":"command"}}],[10,"exec","","Performs all the required setup by this `Command`, followed by calling\nthe `execvp` syscall.",104,{"inputs":[{"name":"commandext"}],"output":{"name":"error"}}],[8,"IntoRawFd","","A trait to express the ability to consume an object and acquire ownership of\nits raw file descriptor.",null,null],[10,"into_raw_fd","","Consumes this object, returning the raw underlying file descriptor.",95,{"inputs":[{"name":"intorawfd"}],"output":{"name":"i32"}}],[8,"OpenOptionsExt","","Unix-specific extensions to `OpenOptions`",null,null],[10,"mode","","Sets the mode bits that a new file will be created with.",99,{"inputs":[{"name":"openoptionsext"},{"name":"u32"}],"output":{"name":"self"}}],[10,"custom_flags","","Pass custom flags to the `flags` agument of `open`.",99,{"inputs":[{"name":"openoptionsext"},{"name":"i32"}],"output":{"name":"self"}}],[8,"FileTypeExt","","Add special unix types (block/char device, fifo and socket)",null,null],[10,"is_block_device","","Returns whether this file type is a block device.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_char_device","","Returns whether this file type is a char device.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_fifo","","Returns whether this file type is a fifo.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[10,"is_socket","","Returns whether this file type is a socket.",101,{"inputs":[{"name":"filetypeext"}],"output":{"name":"bool"}}],[8,"DirEntryExt","","Unix-specific extension methods for `fs::DirEntry`",null,null],[10,"ino","","Returns the underlying `d_ino` field in the contained `dirent`\nstructure.",102,{"inputs":[{"name":"direntryext"}],"output":{"name":"u64"}}],[8,"OsStringExt","","Unix-specific extensions to `OsString`.",null,null],[10,"from_vec","","Creates an `OsString` from a byte vector.",96,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[10,"into_vec","","Yields the underlying byte vector of this `OsString`.",96,{"inputs":[{"name":"osstringext"}],"output":{"name":"vec"}}],[8,"ExitStatusExt","","Unix-specific extensions to `std::process::ExitStatus`",null,null],[10,"signal","","If the process was terminated by a signal, returns that signal.",105,{"inputs":[{"name":"exitstatusext"}],"output":{"name":"option"}}],[0,"panic","bitflags::__core","Panic support in the standard library",null,null],[5,"set_handler","bitflags::__core::panic","",null,null],[5,"take_handler","","",null,{"inputs":[],"output":{"name":"box"}}],[8,"RecoverSafe","","A marker trait which represents &quot;panic safe&quot; types in Rust.",null,null],[8,"RefRecoverSafe","","A marker trait representing types where a shared reference is considered\nrecover safe.",null,null],[3,"AssertRecoverSafe","","A simple wrapper around a type to assert that it is panic safe.",null,null],[12,"0","","",107,null],[5,"recover","","Invokes a closure, capturing the cause of panic if one occurs.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"propagate","","Triggers a panic without invoking the panic handler.",null,null],[5,"set_hook","","Registers a custom panic hook, replacing any that was previously registered.",null,null],[3,"PanicInfo","","A struct providing information about a panic.",null,null],[3,"Location","","A struct containing information about the location of a panic.",null,null],[5,"take_hook","","Unregisters the current panic hook, returning it.",null,{"inputs":[],"output":{"name":"box"}}],[0,"path","bitflags::__core","Cross-platform path manipulation.",null,null],[4,"Prefix","bitflags::__core::path","Path prefixes (Windows only).",null,null],[13,"Verbatim","","Prefix `\\\\?\\`, together with the given component immediately following it.",108,null],[13,"VerbatimUNC","","Prefix `\\\\?\\UNC\\`, with the &quot;server&quot; and &quot;share&quot; components following it.",108,null],[13,"VerbatimDisk","","Prefix like `\\\\?\\C:\\`, for the given drive letter",108,null],[13,"DeviceNS","","Prefix `\\\\.\\`, together with the given component immediately following it.",108,null],[13,"UNC","","Prefix `\\\\server\\share`, with the given &quot;server&quot; and &quot;share&quot; components.",108,null],[13,"Disk","","Prefix `C:` for the given disk drive.",108,null],[5,"is_separator","","Determines whether the character is one of the permitted path\nseparators for the current platform.",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"MAIN_SEPARATOR","","The primary separator for the current platform",null,null],[3,"PrefixComponent","","A Windows path prefix, e.g. `C:` or `\\server\\share`.",null,null],[4,"Component","","A single component of a path.",null,null],[13,"Prefix","","A Windows path prefix, e.g. `C:` or `\\server\\share`.",109,null],[13,"RootDir","","The root directory component, appears after any prefix and before anything else",109,null],[13,"CurDir","","A reference to the current directory, i.e. `.`",109,null],[13,"ParentDir","","A reference to the parent directory, i.e. `..`",109,null],[13,"Normal","","A normal component, i.e. `a` and `b` in `a/b`",109,null],[3,"Components","","The core iterator giving the components of a path.",null,null],[3,"Iter","","An iterator over the components of a path, as `OsStr` slices.",null,null],[3,"PathBuf","","An owned, mutable path (akin to `String`).",null,null],[3,"Path","","A slice of a path (akin to `str`).",null,null],[3,"StripPrefixError","","An error returned from the `Path::strip_prefix` method indicating that the\nprefix was not found in `self`.",null,null],[3,"Display","","Helper struct for safely printing paths with `format!()` and `{}`",null,null],[0,"process","bitflags::__core","Working with processes.",null,null],[3,"Child","bitflags::__core::process","Representation of a running or exited child process.",null,null],[12,"stdin","","The handle for writing to the child&#39;s stdin, if it has been captured",110,null],[12,"stdout","","The handle for reading from the child&#39;s stdout, if it has been captured",110,null],[12,"stderr","","The handle for reading from the child&#39;s stderr, if it has been captured",110,null],[3,"ChildStdin","","A handle to a child process&#39;s stdin",null,null],[3,"ChildStdout","","A handle to a child process&#39;s stdout",null,null],[3,"ChildStderr","","A handle to a child process&#39;s stderr",null,null],[3,"Command","","The `Command` type acts as a process builder, providing fine-grained control\nover how a new process should be spawned. A default configuration can be\ngenerated using `Command::new(program)`, where `program` gives a path to the\nprogram to be executed. Additional builder methods allow the configuration\nto be changed (for example, by adding arguments) prior to spawning:",null,null],[3,"Output","","The output of a finished process.",null,null],[12,"status","","The status (exit code) of the process.",111,null],[12,"stdout","","The data that the process wrote to stdout.",111,null],[12,"stderr","","The data that the process wrote to stderr.",111,null],[3,"Stdio","","Describes what to do with a standard I/O stream for a child process.",null,null],[3,"ExitStatus","","Describes the result of a process after it has terminated.",null,null],[5,"exit","","Terminates the current process with the specified exit code.",null,null],[0,"sync","bitflags::__core","Useful synchronization primitives.",null,null],[0,"mpsc","bitflags::__core::sync","Multi-producer, single-consumer FIFO queue communication primitives.",null,null],[3,"Receiver","bitflags::__core::sync::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"Iter","","An iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"IntoIter","","An owning iterator over messages on a receiver, this iterator will block\nwhenever `next` is called, waiting for a new message, and `None` will be\nreturned when the corresponding channel has hung up.",null,null],[3,"Sender","","The sending-half of Rust&#39;s asynchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SyncSender","","The sending-half of Rust&#39;s synchronous channel type. This half can only be\nowned by one thread, but it can be cloned to send to other threads.",null,null],[3,"SendError","","An error returned from the `send` function on channels.",null,null],[12,"0","","",112,null],[3,"RecvError","","An error returned from the `recv` function on a `Receiver`.",null,null],[4,"TryRecvError","","This enumeration is the list of the possible reasons that `try_recv` could\nnot return data when called.",null,null],[13,"Empty","","This channel is currently empty, but the sender(s) have not yet\ndisconnected, so data may yet become available.",113,null],[13,"Disconnected","","This channel&#39;s sending half has become disconnected, and there will\nnever be any more data received on this channel",113,null],[4,"TrySendError","","This enumeration is the list of the possible error outcomes for the\n`SyncSender::try_send` method.",null,null],[13,"Full","","The data could not be sent on the channel because it would require that\nthe callee block to send the data.",114,null],[13,"Disconnected","","This channel&#39;s receiving half has disconnected, so the data could not be\nsent. The data is returned back to the callee in this case.",114,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.",null,null],[5,"sync_channel","","Creates a new synchronous, bounded channel.",null,null],[3,"Handle","","A handle to a receiver which is currently a member of a `Select` set of\nreceivers.  This handle is used to keep the receiver in the set as well as\ninteract with the underlying receiver.",null,null],[3,"Select","","The &quot;receiver set&quot; of the select interface. This structure is used to manage\na set of receivers which are being selected over.",null,null],[3,"Once","bitflags::__core::sync","A synchronization primitive which can be used to run a one-time global\ninitialization. Useful for one-time initialization for FFI or related\nfunctionality. This type can only be constructed with the `ONCE_INIT`\nvalue.",null,null],[11,"as_ref","alloc::arc","",115,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","","",115,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"from","","",115,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"arc"}}],[11,"fmt","","",115,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",115,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",115,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",115,null],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",115,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",115,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"deref","","",115,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",115,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",115,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",115,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",115,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"new","","Constructs a new `Arc&lt;T&gt;`.",115,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",115,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[3,"Arc","bitflags::__core::sync","An atomically reference counted wrapper for shared state.",null,null],[6,"LockResult","","",null,null],[3,"BarrierWaitResult","","A result returned from wait.",null,null],[3,"RwLock","","A reader-writer lock",null,null],[17,"MUTEX_INIT","","Static initialization of a mutex. This constant can be used to initialize\nother mutex constants.",null,null],[4,"TryLockError","","An enumeration of possible errors which can occur while calling the\n`try_lock` method.",null,null],[13,"Poisoned","","The lock could not be acquired because another thread failed while holding\nthe lock.",116,null],[13,"WouldBlock","","The lock could not be acquired at this time because the operation would\notherwise block.",116,null],[0,"atomic","","Atomic types",null,null],[11,"fmt","core::sync::atomic","",117,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicBool`.",117,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",117,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",117,null],[11,"swap","","Stores a value into the bool, returning the old value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",117,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"default","","",117,{"inputs":[],"output":{"name":"atomicbool"}}],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",118,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicIsize`.",118,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",118,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",118,null],[11,"swap","","Stores a value into the isize, returning the old value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",118,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"atomicisize"}}],[3,"AtomicIsize","bitflags::__core::sync::atomic","A signed integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",119,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicUsize`.",119,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",119,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",119,null],[11,"swap","","Stores a value into the usize, returning the old value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",119,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"atomicusize"}}],[3,"AtomicUsize","bitflags::__core::sync::atomic","An unsigned integer type which can be safely shared between threads.",null,null],[11,"fmt","core::sync::atomic","",120,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `AtomicPtr`.",120,null],[11,"load","","Loads a value from the pointer.",120,null],[11,"store","","Stores a value into the pointer.",120,null],[11,"swap","","Stores a value into the pointer, returning the old value.",120,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",120,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",120,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",120,null],[11,"default","","",120,{"inputs":[],"output":{"name":"atomicptr"}}],[3,"AtomicPtr","bitflags::__core::sync::atomic","A raw pointer type which can be safely shared between threads.",null,null],[11,"clone","core::sync::atomic","",121,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"fmt","","",121,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::sync::atomic","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",121,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto another thread that performs a load with `Acquire` ordering\non the same value.",121,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin another thread.",121,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",121,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",121,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[17,"ATOMIC_ISIZE_INIT","","An `AtomicIsize` initialized to `0`.",null,null],[17,"ATOMIC_USIZE_INIT","","An `AtomicUsize` initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[3,"Mutex","bitflags::__core::sync","A mutual exclusion primitive useful for protecting shared data",null,null],[3,"StaticMutex","","The static mutex type is provided to allow for static allocation of mutexes.",null,null],[6,"TryLockResult","","",null,null],[3,"RwLockReadGuard","","RAII structure used to release the shared read access of a lock when\ndropped.",null,null],[17,"CONDVAR_INIT","","Constant initializer for a statically allocated condition variable.",null,null],[3,"PoisonError","","A type of error which can be returned whenever a lock is acquired.",null,null],[3,"WaitTimeoutResult","","A type indicating whether a timed wait on a condition variable returned\ndue to a time out or not.",null,null],[17,"ONCE_INIT","","Initialization value for static `Once` values.",null,null],[3,"RwLockWriteGuard","","RAII structure used to release the exclusive write access of a lock when\ndropped.",null,null],[11,"new","alloc::arc","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",122,{"inputs":[],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",122,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",122,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",122,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"fmt","","",122,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Weak","bitflags::__core::sync","A weak pointer to an `Arc`.",null,null],[3,"Condvar","","A Condition Variable",null,null],[3,"Barrier","","A barrier enables multiple threads to synchronize the beginning\nof some computation.",null,null],[3,"StaticRwLock","","Structure representing a statically allocated RwLock.",null,null],[17,"RW_LOCK_INIT","","Constant initialization for a statically-initialized rwlock.",null,null],[3,"StaticCondvar","","Statically allocated condition variables.",null,null],[3,"MutexGuard","","An RAII implementation of a &quot;scoped lock&quot; of a mutex. When this structure is\ndropped (falls out of scope), the lock will be unlocked.",null,null],[0,"time","bitflags::__core","Temporal quantification.",null,null],[3,"Instant","bitflags::__core::time","A measurement of a monotonically increasing clock.\n Opaque and useful only with `Duration`.",null,null],[3,"SystemTime","","A measurement of the system clock, useful for talking to\nexternal entities like the file system or other processes.",null,null],[3,"SystemTimeError","","An error returned from the `duration_since` method on `SystemTime`,\nused to learn about why how far in the opposite direction a timestamp lies.",null,null],[17,"UNIX_EPOCH","","An anchor in time which can be used to create new `SystemTime` instances or\nlearn about where in time a `SystemTime` lies.",null,null],[3,"Duration","","A duration type to represent a span of time, typically used for system\ntimeouts.",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[11,"eq","core::cell","",123,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"default","","",123,{"inputs":[],"output":{"name":"cell"}}],[11,"clone","","",123,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"new","","Creates a new `Cell` containing the given value.",123,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",123,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",123,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",123,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"fmt","","",123,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[11,"eq","core::cell","",124,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"default","","",124,{"inputs":[],"output":{"name":"refcell"}}],[11,"clone","","",124,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"borrow_state","","Query the current state of this `RefCell`",124,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",124,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",124,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",124,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"new","","Creates a new `RefCell` containing `value`.",124,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",124,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"fmt","","",124,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefCell","bitflags::__core::cell","A mutable memory location with dynamically checked borrow rules",null,null],[11,"clone","core::cell","",125,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"eq","","",125,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"fmt","","",125,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"BorrowState","bitflags::__core::cell","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",125,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",125,null],[13,"Unused","","There are no outstanding borrows on this cell.",125,null],[11,"clone","core::cell","Copies a `Ref`.",126,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",126,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",126,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",126,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"fmt","","",126,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Ref","bitflags::__core::cell","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"deref_mut","core::cell","",127,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref","","",127,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",127,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",127,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"fmt","","",127,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RefMut","bitflags::__core::cell","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[11,"get","core::cell","Gets a mutable pointer to the wrapped value.",128,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",128,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",128,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"fmt","","",128,{"inputs":[{"name":"unsafecell"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"UnsafeCell","bitflags::__core::cell","The core primitive for interior mutability in Rust.",null,null],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"ToOwned","bitflags::__core::borrow","A generalization of `Clone` to borrowed data.",null,null],[16,"Owned","","",16,null],[10,"to_owned","","Creates owned data from borrowed data, usually by cloning.",16,null],[11,"as_ref","collections::borrow","",129,{"inputs":[{"name":"cow"}],"output":{"name":"t"}}],[11,"hash","","",129,null],[11,"fmt","","",129,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"cow"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",129,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"option"}}],[11,"eq","","",129,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"bool"}}],[11,"cmp","","",129,{"inputs":[{"name":"cow"},{"name":"cow"}],"output":{"name":"ordering"}}],[11,"deref","","",129,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",129,null],[11,"into_owned","","Extracts the owned data.",129,null],[11,"clone","","",129,{"inputs":[{"name":"cow"}],"output":{"name":"cow"}}],[11,"borrow","","",129,{"inputs":[{"name":"cow"}],"output":{"name":"b"}}],[11,"eq","","",129,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"cow"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",129,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",129,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"cow"},{"name":"str"}],"output":{"name":"bool"}}],[11,"from","","",129,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"from","","",129,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"from_iter","","",129,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"from","","",129,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from","","",129,null],[11,"eq","","",129,null],[11,"ne","","",129,null],[11,"eq","","",129,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",129,{"inputs":[{"name":"cow"},{"name":"vec"}],"output":{"name":"bool"}}],[4,"Cow","bitflags::__core::borrow","A clone-on-write smart pointer.",null,null],[13,"Borrowed","","Borrowed data.",129,null],[13,"Owned","","Owned data.",129,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",130,{"inputs":[{"name":"borrowmut"}],"output":{"name":"borrowed"}}],[8,"Borrow","","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",131,{"inputs":[{"name":"borrow"}],"output":{"name":"borrowed"}}],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",132,{"inputs":[{"name":"any"}],"output":{"name":"typeid"}}],[11,"of","core::any","Returns the `TypeId` of the type this generic function has been\ninstantiated with",133,{"inputs":[],"output":{"name":"typeid"}}],[11,"clone","","",133,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"eq","","",133,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",133,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"fmt","","",133,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",133,null],[3,"TypeId","bitflags::__core::any","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",6,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",134,null],[10,"add","","The method for the `+` operator",134,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",135,null],[10,"sub","","The method for the `-` operator",135,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",136,null],[10,"mul","","The method for the `*` operator",136,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",137,null],[10,"div","","The method for the `/` operator",137,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",138,null],[10,"rem","","The method for the `%` operator",138,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",139,null],[10,"neg","","The method for the unary `-` operator",139,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",140,null],[10,"not","","The method for the unary `!` operator",140,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",141,null],[10,"bitand","","The method for the `&amp;` operator",141,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",142,null],[10,"bitor","","The method for the `|` operator",142,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",143,null],[10,"bitxor","","The method for the `^` operator",143,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",144,null],[10,"shl","","The method for the `&lt;&lt;` operator",144,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",145,null],[10,"shr","","The method for the `&gt;&gt;` operator",145,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",146,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",147,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",148,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",149,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",150,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",151,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",152,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",153,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",154,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",155,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",156,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",156,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",157,null],[11,"fmt","core::ops","",158,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",158,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"eq","","",158,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[3,"RangeFull","bitflags::__core::ops","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[11,"step_by","core::ops","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",159,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","","",159,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",159,null],[11,"contains","","# Examples",159,{"inputs":[{"name":"range"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",159,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",159,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"eq","","",159,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"next_back","","",159,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[3,"Range","bitflags::__core::ops","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",159,null],[12,"end","","The upper bound of the range (exclusive).",159,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",160,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",160,{"inputs":[{"name":"rangefrom"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",160,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",160,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"eq","","",160,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",160,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"next","","",160,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[3,"RangeFrom","bitflags::__core::ops","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",160,null],[11,"contains","core::ops","# Examples",161,{"inputs":[{"name":"rangeto"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",161,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",161,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"eq","","",161,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",161,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[3,"RangeTo","bitflags::__core::ops","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",161,null],[11,"step_by","core::ops","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",162,{"inputs":[{"name":"rangeinclusive"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"contains","","# Examples",162,{"inputs":[{"name":"rangeinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"from","","",162,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"fmt","","",162,{"inputs":[{"name":"rangeinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"eq","","",162,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",162,{"inputs":[{"name":"rangeinclusive"},{"name":"rangeinclusive"}],"output":{"name":"bool"}}],[11,"next_back","","",162,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",162,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",162,null],[4,"RangeInclusive","bitflags::__core::ops","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",162,null],[12,"at","bitflags::__core::ops::RangeInclusive","",162,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",162,null],[12,"start","bitflags::__core::ops::RangeInclusive","",162,null],[12,"end","","",162,null],[11,"contains","core::ops","# Examples",163,{"inputs":[{"name":"rangetoinclusive"},{"name":"idx"}],"output":{"name":"bool"}}],[11,"fmt","","",163,{"inputs":[{"name":"rangetoinclusive"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",163,{"inputs":[{"name":"rangetoinclusive"}],"output":{"name":"rangetoinclusive"}}],[11,"eq","","",163,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[11,"ne","","",163,{"inputs":[{"name":"rangetoinclusive"},{"name":"rangetoinclusive"}],"output":{"name":"bool"}}],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",163,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",164,null],[10,"deref","","The method called to dereference a value",164,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",165,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",4,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",3,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",1,null],[10,"call_once","","This is called when the call operator is used.",1,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",166,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",167,null],[10,"make_place","","Creates a fresh place from `self`.",167,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",168,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",168,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",169,null],[16,"Place","","The place that will negotiate the storage of the data.",169,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",169,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",170,{"inputs":[],"output":{"name":"self"}}],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[11,"fmt","core::marker","",171,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",171,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","","",171,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"cmp","","",171,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",171,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"eq","","",171,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"hash","","",171,null],[3,"PhantomData","bitflags::__core::marker","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"char","bitflags::__core","A character type.",null,null],[3,"ToLowercase","bitflags::__core::char","Returns an iterator that yields the lowercase equivalent of a `char`.",null,null],[3,"ToUppercase","","Returns an iterator that yields the uppercase equivalent of a `char`.",null,null],[3,"DecodeUtf16","","An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s.",null,null],[5,"decode_utf16","","Create an iterator over the UTF-16 encoded code points in `iterable`,\nreturning unpaired surrogates as `Err`s.",null,{"inputs":[{"name":"i"}],"output":{"name":"decodeutf16"}}],[17,"REPLACEMENT_CHARACTER","","`U+FFFD REPLACEMENT CHARACTER` (�) is used in Unicode to represent a decoding error.\nIt can occur, for example, when giving ill-formed UTF-8 bytes to\n[`String::from_utf8_lossy`](../../std/string/struct.String.html#method.from_utf8_lossy).",null,null],[11,"next","core::char","",172,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",172,null],[11,"clone","","",172,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"fmt","","",172,{"inputs":[{"name":"escapeunicode"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EscapeUnicode","bitflags::__core::char","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[11,"next","core::char","",173,{"inputs":[{"name":"encodeutf8"}],"output":{"name":"option"}}],[11,"size_hint","","",173,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",173,null],[11,"fmt","","",173,{"inputs":[{"name":"encodeutf8"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf8","bitflags::__core::char","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[17,"MAX","","The highest valid code point a `char` can have.",null,null],[11,"clone","core::char","",174,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"fmt","","",174,{"inputs":[{"name":"escapedefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",174,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",174,null],[11,"count","","",174,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",174,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",174,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[3,"EscapeDefault","bitflags::__core::char","An iterator that yields the literal escape code of a `char`.",null,null],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"next","core::char","",175,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",175,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",175,null],[11,"fmt","","",175,{"inputs":[{"name":"encodeutf16"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"EncodeUtf16","bitflags::__core::char","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat the unicode parts of `CharExt` and `UnicodeStrPrelude` traits are based on.",null,null],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[0,"boxed","bitflags::__core","A pointer type for heap allocation.",null,null],[17,"HEAP","bitflags::__core::boxed","A value that represents the heap. This is the default place that the `box`\nkeyword allocates into when no place is supplied.",null,null],[3,"ExchangeHeapSingleton","","This the singleton type used solely for `boxed::HEAP`.",null,null],[3,"Box","","A pointer type for heap allocation.",null,null],[3,"IntermediateBox","","`IntermediateBox` represents uninitialized backing storage for `Box`.",null,null],[8,"FnBox","","`FnBox` is a version of the `FnOnce` intended for use with boxed\nclosure objects. The idea is that where one would normally store a\n`Box&lt;FnOnce()&gt;` in a data structure, you should use\n`Box&lt;FnBox()&gt;`. The two traits behave essentially the same, except\nthat a `FnBox` closure can only be called if it is boxed. (Note\nthat `FnBox` may be deprecated in the future if `Box&lt;FnOnce()&gt;`\nclosures become directly usable.)",null,null],[16,"Output","","",176,null],[10,"call_box","","",176,null],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",22,null],[13,"Some","","Some value `T`",22,null],[11,"clone","core::option","",177,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",177,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",177,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",177,null],[11,"fmt","","",177,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::option","An iterator over a reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",178,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",178,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",178,null],[11,"fmt","","",178,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::option","An iterator over a mutable reference of the contained item in an Option.",null,null],[11,"next_back","core::option","",179,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",179,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",179,null],[11,"clone","","",179,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"fmt","","",179,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::option","An iterator over the item contained inside an Option.",null,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",180,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",180,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",181,{"inputs":[{"name":"hasher"}],"output":{"name":"u64"}}],[10,"write","","Writes some data into this `Hasher`",181,null],[11,"write_u8","","Write a single `u8` into this hasher",181,null],[11,"write_u16","","Write a single `u16` into this hasher.",181,null],[11,"write_u32","","Write a single `u32` into this hasher.",181,null],[11,"write_u64","","Write a single `u64` into this hasher.",181,null],[11,"write_usize","","Write a single `usize` into this hasher.",181,null],[11,"write_i8","","Write a single `i8` into this hasher.",181,null],[11,"write_i16","","Write a single `i16` into this hasher.",181,null],[11,"write_i32","","Write a single `i32` into this hasher.",181,null],[11,"write_i64","","Write a single `i64` into this hasher.",181,null],[11,"write_isize","","Write a single `isize` into this hasher.",181,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",182,null],[10,"build_hasher","","Creates a new hasher.",182,null],[11,"build_hasher","core::hash","",183,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"fmt","","",183,{"inputs":[{"name":"buildhasherdefault"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",183,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"clone","","",183,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[3,"BuildHasherDefault","bitflags::__core::hash","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[11,"clone","core::hash::sip","",184,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"write","","",184,null],[11,"finish","","",184,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",184,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",184,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"fmt","","",184,{"inputs":[{"name":"siphasher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",184,{"inputs":[],"output":{"name":"siphasher"}}],[3,"SipHasher","bitflags::__core::hash","An implementation of SipHash 2-4.",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[11,"fmt","core::ptr","",185,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",185,null],[11,"new","","Creates a new `Unique`.",185,null],[11,"get","","Dereferences the content.",185,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",185,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[3,"Unique","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[11,"fmt","core::ptr","",186,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",186,null],[11,"clone","","",186,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"new","","Creates a new `Shared`.",186,null],[3,"Shared","bitflags::__core::ptr","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",10,null],[13,"Err","","Contains the error value",10,null],[11,"clone","core::result","",187,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",187,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",187,null],[11,"fmt","","",187,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::result","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",188,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",188,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",188,null],[11,"fmt","","",188,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::result","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[11,"next_back","core::result","",189,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",189,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",189,null],[11,"fmt","","",189,{"inputs":[{"name":"intoiter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IntoIter","bitflags::__core::result","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[11,"clone","core::raw","",190,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",190,null],[12,"len","","",190,null],[11,"clone","core::raw","",191,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[3,"TraitObject","bitflags::__core::raw","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",191,null],[12,"vtable","","",191,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",192,{"inputs":[{"name":"repr"}],"output":{"name":"t"}}],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",8,{"inputs":[],"output":{"name":"self"}}],[0,"slice","bitflags::__core","A dynamically-sized view into a contiguous sequence, `[T]`.",null,null],[8,"SliceConcatExt","bitflags::__core::slice","An extension trait for concatenating slices",null,null],[16,"Output","","The resulting type after concatenation",20,null],[10,"concat","","Flattens a slice of `T` into a single value `Self::Output`.",20,null],[10,"join","","Flattens a slice of `T` into a single value `Self::Output`, placing a\ngiven separator between each.",20,null],[10,"connect","","",20,null],[11,"next_back","core::slice","",193,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next","","",193,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",193,null],[11,"clone","","",193,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"fmt","","",193,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[11,"next_back","core::slice","",194,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",194,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",194,null],[11,"count","","",194,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",194,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",194,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"clone","","",194,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"fmt","","",194,{"inputs":[{"name":"chunks"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chunks","bitflags::__core::slice","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[11,"next","core::slice","",195,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",195,null],[11,"fmt","","",195,{"inputs":[{"name":"rsplitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next","core::slice","",196,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",196,null],[11,"fmt","","",196,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[11,"next","core::slice","",197,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",197,null],[11,"fmt","","",197,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitN","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[11,"clone","core::slice","",198,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next_back","","",198,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",198,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",198,null],[11,"count","","",198,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",198,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",198,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"as_slice","","View the underlying data as a subslice of the original data.",198,null],[11,"fmt","","",198,{"inputs":[{"name":"iter"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Iter","bitflags::__core::slice","Immutable slice iterator",null,null],[11,"next_back","core::slice","",199,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next","","",199,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",199,null],[11,"count","","",199,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",199,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",199,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","","",199,{"inputs":[{"name":"chunksmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"ChunksMut","bitflags::__core::slice","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[11,"next_back","core::slice","",200,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",200,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",200,null],[11,"count","","",200,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",200,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",200,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",200,null],[11,"fmt","","",200,{"inputs":[{"name":"itermut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"IterMut","bitflags::__core::slice","Mutable slice iterator.",null,null],[11,"next_back","core::slice","",201,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next","","",201,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",201,null],[11,"count","","",201,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",201,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",201,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",201,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"fmt","","",201,{"inputs":[{"name":"windows"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Windows","bitflags::__core::slice","An iterator over overlapping subslices of length `size`.",null,null],[11,"next_back","core::slice","",202,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",202,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",202,null],[11,"fmt","","",202,{"inputs":[{"name":"splitmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitMut","bitflags::__core::slice","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[11,"next","core::slice","",203,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",203,null],[11,"fmt","","",203,{"inputs":[{"name":"splitnmut"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitNMut","bitflags::__core::slice","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings",null,null],[5,"format","bitflags::__core::fmt","The format function takes a precompiled format string and a list of\narguments, to return the resulting formatted string.",null,{"inputs":[{"name":"arguments"}],"output":{"name":"string"}}],[11,"fmt","core::fmt","",204,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",204,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",204,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[3,"Arguments","bitflags::__core::fmt","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",205,{"inputs":[{"name":"debug"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",206,{"inputs":[{"name":"display"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated tuple struct output.",207,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",207,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[3,"DebugTuple","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",208,{"inputs":[{"name":"lowerhex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the list output.",209,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",209,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",209,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[3,"DebugList","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",210,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",211,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",211,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[3,"DebugStruct","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[6,"Result","","",null,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",212,{"inputs":[{"name":"lowerexp"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",213,{"inputs":[{"name":"octal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entry","core::fmt::builders","Adds a new entry to the map output.",214,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",214,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",214,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[3,"DebugMap","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",215,{"inputs":[{"name":"upperexp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt","",216,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",216,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",216,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",216,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",216,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",216,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",216,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",216,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",216,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",216,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",216,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",216,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",216,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",216,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",216,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[3,"Formatter","bitflags::__core::fmt","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",217,{"inputs":[{"name":"write"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",217,{"inputs":[{"name":"write"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",217,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"clone","core::fmt","",218,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",218,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",218,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Error","bitflags::__core::fmt","The error type which is returned from formatting a message into a stream.",null,null],[11,"entry","core::fmt::builders","Adds a new entry to the set output.",219,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",219,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",219,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[3,"DebugSet","bitflags::__core::fmt","A struct to help with `fmt::Debug` implementations.",null,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",220,{"inputs":[{"name":"upperhex"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",221,{"inputs":[{"name":"pointer"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",11,{"inputs":[{"name":"asref"}],"output":{"name":"t"}}],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",2,{"inputs":[{"name":"asmut"}],"output":{"name":"t"}}],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",15,{"inputs":[{"name":"into"}],"output":{"name":"t"}}],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"rc","bitflags::__core","Thread-local reference-counted boxes (the `Rc&lt;T&gt;` type).",null,null],[11,"default","alloc::rc","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",222,{"inputs":[],"output":{"name":"rc"}}],[11,"as_ref","","",222,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"borrow","","",222,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",222,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"drop","","Drops the `Rc&lt;T&gt;`.",222,null],[11,"deref","","",222,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"from","","",222,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"fmt","","",222,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",222,{"inputs":[{"name":"rc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",222,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"ordering"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",222,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",222,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",222,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",222,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",222,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",222,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Rc&lt;T&gt;`.",222,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",222,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",222,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",222,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}],[3,"Rc","bitflags::__core::rc","A reference-counted pointer type over an immutable value.",null,null],[11,"clone","alloc::rc","Makes a clone of the `Weak&lt;T&gt;`.",223,{"inputs":[{"name":"weak"}],"output":{"name":"weak"}}],[11,"drop","","Drops the `Weak&lt;T&gt;`.",223,null],[11,"upgrade","","Upgrades a weak reference to a strong reference.",223,{"inputs":[{"name":"weak"}],"output":{"name":"option"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",223,{"inputs":[],"output":{"name":"weak"}}],[11,"fmt","","",223,{"inputs":[{"name":"weak"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Weak","bitflags::__core::rc","A weak version of `Rc&lt;T&gt;`.",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[8,"Iterator","bitflags::__core::iter","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",9,null],[10,"next","","Advances the iterator and returns the next value.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",9,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"usize"}}],[11,"last","","Consumes the iterator, returning the last element.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",9,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"option"}}],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",9,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"chain"}}],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",9,{"inputs":[{"name":"iterator"},{"name":"u"}],"output":{"name":"zip"}}],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"map"}}],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"filter"}}],[11,"filter_map","","Creates an iterator that both filters and maps.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"enumerate"}}],[11,"peekable","","Creates an iterator which can look at the `next()` element without\nconsuming it.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"peekable"}}],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"skip","","Creates an iterator that skips the first `n` elements.",9,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"skip"}}],[11,"take","","Creates an iterator that yields its first `n` elements.",9,{"inputs":[{"name":"iterator"},{"name":"usize"}],"output":{"name":"take"}}],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",9,{"inputs":[{"name":"iterator"},{"name":"st"},{"name":"f"}],"output":{"name":"scan"}}],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"flatmap"}}],[11,"fuse","","Creates an iterator which ends after the first `None`.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with each element of an iterator, passing the value on.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"by_ref","","Borrows an iterator, rather than consuming it.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"self"}}],[11,"collect","","Transforms an iterator into a collection.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"b"}}],[11,"partition","","Consumes an iterator, creating two collections from it.",9,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",9,{"inputs":[{"name":"iterator"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[11,"all","","Tests if every element of the iterator matches a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"any","","Tests if any element of the iterator matches a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"bool"}}],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"position","","Searches for an element in an iterator, returning its index.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",9,{"inputs":[{"name":"iterator"},{"name":"p"}],"output":{"name":"option"}}],[11,"max","","Returns the maximum element of an iterator.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"min","","Returns the minimum element of an iterator.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"option"}}],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",9,{"inputs":[{"name":"iterator"},{"name":"f"}],"output":{"name":"option"}}],[11,"rev","","Reverses an iterator&#39;s direction.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"rev"}}],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",9,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"cloned"}}],[11,"cycle","","Repeats an iterator endlessly.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"cycle"}}],[11,"sum","","Sums the elements of an iterator.",9,{"inputs":[{"name":"iterator"}],"output":{"name":"s"}}],[11,"product","","Iterates over the entire iterator, multiplying all the elements",9,{"inputs":[{"name":"iterator"}],"output":{"name":"p"}}],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"option"}}],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",9,{"inputs":[{"name":"iterator"},{"name":"i"}],"output":{"name":"bool"}}],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",224,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",7,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",7,null],[10,"into_iter","","Creates an iterator from a value.",7,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",18,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",17,{"inputs":[{"name":"doubleendediterator"}],"output":{"name":"option"}}],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",14,{"inputs":[{"name":"exactsizeiterator"}],"output":{"name":"usize"}}],[11,"next_back","core::iter","",225,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",225,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"fmt","","",225,{"inputs":[{"name":"rev"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",225,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",225,null],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[11,"fmt","core::iter","",226,{"inputs":[{"name":"cloned"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",226,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next_back","","",226,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"next","","",226,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",226,null],[3,"Cloned","bitflags::__core::iter","An iterator that clones the elements of an underlying iterator.",null,null],[11,"next","core::iter","",227,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",227,null],[11,"clone","","",227,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"fmt","","",227,{"inputs":[{"name":"cycle"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Cycle","bitflags::__core::iter","An iterator that repeats endlessly.",null,null],[11,"next_back","core::iter","",228,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"next","","",228,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",228,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",228,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",228,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",228,null],[11,"clone","","",228,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"fmt","","",228,{"inputs":[{"name":"chain"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chain","bitflags::__core::iter","An iterator that strings two iterators together.",null,null],[11,"fmt","core::iter","",229,{"inputs":[{"name":"zip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",229,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"next","","",229,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",229,null],[11,"clone","","",229,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[3,"Zip","bitflags::__core::iter","An iterator that iterates two other iterators simultaneously.",null,null],[11,"next_back","core::iter","",230,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"next","","",230,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",230,null],[11,"fmt","","",230,{"inputs":[{"name":"map"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",230,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[3,"Map","bitflags::__core::iter","An iterator that maps the values of `iter` with `f`.",null,null],[11,"next_back","core::iter","",231,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"next","","",231,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",231,null],[11,"fmt","","",231,{"inputs":[{"name":"filter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",231,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[3,"Filter","bitflags::__core::iter","An iterator that filters the elements of `iter` with `predicate`.",null,null],[11,"clone","core::iter","",232,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",232,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",232,null],[11,"fmt","","",232,{"inputs":[{"name":"filtermap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",232,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[3,"FilterMap","bitflags::__core::iter","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[11,"fmt","core::iter","",233,{"inputs":[{"name":"enumerate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",233,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"next","","# Overflow Behavior",233,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",233,null],[11,"nth","","",233,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",233,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"clone","","",233,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[3,"Enumerate","bitflags::__core::iter","An iterator that yields the current count and the element during iteration.",null,null],[11,"peek","core::iter","Returns a reference to the next() value without advancing the iterator.",234,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",234,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"next","","",234,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",234,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",234,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",234,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",234,null],[11,"clone","","",234,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"fmt","","",234,{"inputs":[{"name":"peekable"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Peekable","bitflags::__core::iter","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[11,"next","core::iter","",235,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",235,null],[11,"fmt","","",235,{"inputs":[{"name":"skipwhile"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",235,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[3,"SkipWhile","bitflags::__core::iter","An iterator that rejects elements while `predicate` is true.",null,null],[11,"clone","core::iter","",236,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",236,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",236,null],[11,"fmt","","",236,{"inputs":[{"name":"takewhile"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"TakeWhile","bitflags::__core::iter","An iterator that only accepts elements while `predicate` is true.",null,null],[11,"fmt","core::iter","",237,{"inputs":[{"name":"skip"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",237,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"clone","","",237,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",237,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",237,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",237,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",237,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",237,null],[3,"Skip","bitflags::__core::iter","An iterator that skips over `n` elements of `iter`.",null,null],[11,"clone","core::iter","",238,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"fmt","","",238,{"inputs":[{"name":"take"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",238,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",238,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",238,null],[3,"Take","bitflags::__core::iter","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[11,"next","core::iter","",239,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",239,null],[11,"fmt","","",239,{"inputs":[{"name":"scan"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",239,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[3,"Scan","bitflags::__core::iter","An iterator to maintain state while iterating another iterator.",null,null],[11,"next","core::iter","",240,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",240,null],[11,"next_back","","",240,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"fmt","","",240,{"inputs":[{"name":"flatmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",240,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[3,"FlatMap","bitflags::__core::iter","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[11,"fmt","core::iter","",241,{"inputs":[{"name":"fuse"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",241,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"next","","",241,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",241,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",241,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",241,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",241,null],[11,"clone","","",241,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[3,"Fuse","bitflags::__core::iter","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[11,"next","core::iter","",242,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",242,null],[11,"next_back","","",242,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",242,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"fmt","","",242,{"inputs":[{"name":"inspect"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Inspect","bitflags::__core::iter","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",243,{"inputs":[{"name":"step"},{"name":"self"}],"output":{"name":"option"}}],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",243,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"next","core::iter","",244,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"fmt","","",244,{"inputs":[{"name":"stepby"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",244,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"next","","",244,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",244,null],[11,"clone","","",244,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[3,"StepBy","bitflags::__core::iter","An adapter for stepping range iterators by a custom amount.",null,null],[11,"next_back","core::iter","",245,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",245,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",245,null],[11,"clone","","",245,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"fmt","","",245,{"inputs":[{"name":"repeat"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Repeat","bitflags::__core::iter","An iterator that repeats an element endlessly.",null,null],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[11,"default","core::iter","",246,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",246,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"len","","",246,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"next_back","","",246,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"next","","",246,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",246,null],[11,"fmt","","",246,{"inputs":[{"name":"empty"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Empty","bitflags::__core::iter","An iterator that yields nothing.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[11,"len","core::iter","",247,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"next_back","","",247,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"next","","",247,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",247,null],[11,"clone","","",247,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"fmt","","",247,{"inputs":[{"name":"once"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Once","bitflags::__core::iter","An iterator that yields an element exactly once.",null,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",19,{"inputs":[{"name":"clone"}],"output":{"name":"self"}}],[11,"clone_from","","Performs copy-assignment from `source`.",19,null],[0,"str","bitflags::__core","Unicode string slices.",null,null],[6,"Utf16Units","bitflags::__core::str","",null,null],[11,"next","collections::str","",248,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"option"}}],[11,"size_hint","","",248,null],[11,"clone","","",248,{"inputs":[{"name":"encodeutf16"}],"output":{"name":"encodeutf16"}}],[3,"EncodeUtf16","bitflags::__core::str","External iterator for a string&#39;s UTF-16 code units.",null,null],[11,"clone","core::str","",249,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"next","","",249,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"fmt","","",249,{"inputs":[{"name":"rsplitn"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitN","bitflags::__core::str","Created with the method [`rsplitn()`].",null,null],[11,"clone","core::str","",250,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next","","",250,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"fmt","","",250,{"inputs":[{"name":"rsplit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",250,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[3,"RSplit","bitflags::__core::str","Created with the method [`rsplit()`].",null,null],[11,"next","rustc_unicode::u_str","",251,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[11,"next_back","","",251,{"inputs":[{"name":"splitwhitespace"}],"output":{"name":"option"}}],[3,"SplitWhitespace","bitflags::__core::str","An iterator over the non-whitespace substrings of a string,\nseparated by any amount of whitespace.",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",252,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"next_back","","",252,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"next","","",252,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",252,null],[11,"clone","","",252,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"fmt","","",252,{"inputs":[{"name":"chars"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Chars","bitflags::__core::str","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[11,"next_back","core::str","",253,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",253,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",253,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"fmt","","",253,{"inputs":[{"name":"matchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"MatchIndices","bitflags::__core::str","Created with the method [`match_indices()`].",null,null],[11,"fmt","core::str","",254,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",254,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",254,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"eq","","",254,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",254,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[3,"ParseBoolError","bitflags::__core::str","An error returned when parsing a `bool` from a string fails.",null,null],[11,"next","core::str","",255,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",255,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",255,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"fmt","","",255,{"inputs":[{"name":"rsplitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"RSplitTerminator","bitflags::__core::str","Created with the method [`rsplit_terminator()`].",null,null],[11,"clone","core::str","",256,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next","","",256,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"fmt","","",256,{"inputs":[{"name":"rmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",256,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[3,"RMatches","bitflags::__core::str","Created with the method [`rmatches()`].",null,null],[11,"next_back","core::str","",257,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",257,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",257,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"fmt","","",257,{"inputs":[{"name":"matches"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Matches","bitflags::__core::str","Created with the method [`matches()`].",null,null],[0,"pattern","","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",258,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",258,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",258,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",258,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",258,{"inputs":[{"name":"pattern"},{"name":"str"}],"output":{"name":"bool"}}],[11,"clone","core::str::pattern","",259,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"eq","","",259,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",259,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"fmt","","",259,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"SearchStep","bitflags::__core::str::pattern","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",259,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",259,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",259,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",260,{"inputs":[{"name":"searcher"}],"output":{"name":"str"}}],[10,"next","","Performs the next search step starting from the front.",260,{"inputs":[{"name":"searcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","Find the next `Match` result. See `next()`",260,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[11,"next_reject","","Find the next `Reject` result. See `next()`",260,{"inputs":[{"name":"searcher"}],"output":{"name":"option"}}],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",261,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",261,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",261,{"inputs":[{"name":"reversesearcher"}],"output":{"name":"option"}}],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[11,"next_back","core::str::pattern","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",262,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"fmt","","",262,{"inputs":[{"name":"charsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharSearcher","bitflags::__core::str::pattern","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",263,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"fmt","","",263,{"inputs":[{"name":"charslicesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharSliceSearcher","bitflags::__core::str::pattern","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"haystack","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",264,{"inputs":[{"name":"charpredicatesearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",264,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[3,"CharPredicateSearcher","bitflags::__core::str::pattern","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str::pattern","",265,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",265,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"haystack","","",265,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",265,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",265,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"clone","","",265,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",265,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"StrSearcher","bitflags::__core::str::pattern","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[11,"next_back","core::str","",266,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",266,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",266,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"fmt","","",266,{"inputs":[{"name":"splitterminator"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"SplitTerminator","bitflags::__core::str","Created with the method [`split_terminator()`].",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[11,"next_back","core::str","",267,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"next","","",267,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",267,null],[11,"clone","","",267,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"fmt","","",267,{"inputs":[{"name":"lines"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Lines","bitflags::__core::str","Created with the method [`lines()`].",null,null],[11,"as_str","core::str","View the underlying data as a subslice of the original data.",268,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"next_back","","",268,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"next","","",268,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",268,null],[11,"clone","","",268,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"fmt","","",268,{"inputs":[{"name":"charindices"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharIndices","bitflags::__core::str","Iterator for a string&#39;s characters and their byte offsets.",null,null],[11,"clone","core::str","",269,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"fmt","","",269,{"inputs":[{"name":"charrange"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"CharRange","bitflags::__core::str","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",269,null],[12,"next","","Index of the first byte of the next `char`",269,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[11,"next_back","core::str","",270,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",270,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",270,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"fmt","","",270,{"inputs":[{"name":"split"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Split","bitflags::__core::str","Created with the method [`split()`].",null,null],[11,"len","core::str","",271,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"next_back","","",271,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"next","","",271,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",271,null],[11,"count","","",271,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",271,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",271,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clone","","",271,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",271,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Bytes","bitflags::__core::str","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[11,"fmt","core::str","",272,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",272,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"eq","","",272,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",272,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"clone","","",272,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"fmt","","",272,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Utf8Error","bitflags::__core::str","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[11,"clone","core::str","",273,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"fmt","","",273,{"inputs":[{"name":"splitn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",273,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[3,"SplitN","bitflags::__core::str","Created with the method [`splitn()`].",null,null],[11,"clone","core::str","",274,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next","","",274,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"fmt","","",274,{"inputs":[{"name":"rmatchindices"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next_back","","",274,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[3,"RMatchIndices","bitflags::__core::str","Created with the method [`rmatch_indices()`].",null,null],[11,"next","core::str","",275,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",275,null],[11,"next_back","","",275,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",275,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"fmt","","",275,{"inputs":[{"name":"linesany"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"LinesAny","bitflags::__core::str","Created with the method [`lines_any()`].",null,null],[8,"FromStr","","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",276,null],[10,"from_str","","Parses a string `s` to return a value of this type.",276,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[0,"string","bitflags::__core","A UTF-8 encoded, growable string.",null,null],[3,"String","bitflags::__core::string","A UTF-8 encoded, growable string.",null,null],[11,"fmt","collections::string","",277,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",277,{"inputs":[{"name":"fromutf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",277,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"vec"}}],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",277,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"utf8error"}}],[3,"FromUtf8Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-8 byte vector.",null,null],[11,"fmt","collections::string","",278,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",278,{"inputs":[{"name":"fromutf16error"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"FromUtf16Error","bitflags::__core::string","A possible error value when converting a `String` from a UTF-16 byte slice.",null,null],[11,"fmt","collections::string","",279,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",279,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",279,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",279,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[4,"ParseError","bitflags::__core::string","An error when parsing a `String`.",null,null],[8,"ToString","","A trait for converting a value to a `String`.",null,null],[10,"to_string","","Converts the given value to a `String`.",23,{"inputs":[{"name":"tostring"}],"output":{"name":"string"}}],[11,"drop","collections::string","",280,null],[11,"next_back","","",280,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",280,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",280,null],[3,"Drain","bitflags::__core::string","A draining iterator for `String`.",null,null],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ne","","This method tests for `!=`.",25,{"inputs":[{"name":"partialeq"},{"name":"rhs"}],"output":{"name":"bool"}}],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[11,"partial_cmp","core::cmp","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"cmp","","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",281,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"clone","","",281,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"eq","","",281,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fmt","","",281,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[4,"Ordering","bitflags::__core::cmp","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",281,null],[13,"Equal","","An ordering where a compared value is equal [to another].",281,null],[13,"Greater","","An ordering where a compared value is greater [than another].",281,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",5,{"inputs":[{"name":"ord"},{"name":"self"}],"output":{"name":"ordering"}}],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"option"}}],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",12,{"inputs":[{"name":"partialord"},{"name":"rhs"}],"output":{"name":"bool"}}],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"vec","bitflags::__core","A contiguous growable array type with heap-allocated contents, written\n`Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[3,"Vec","bitflags::__core::vec","A contiguous growable array type, written `Vec&lt;T&gt;` but pronounced &#39;vector.&#39;",null,null],[11,"drop","collections::vec","",282,null],[11,"clone","","",282,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next_back","","",282,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",282,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",282,null],[11,"count","","",282,{"inputs":[{"name":"intoiter"}],"output":{"name":"usize"}}],[3,"IntoIter","bitflags::__core::vec","An iterator that moves out of a vector.",null,null],[11,"drop","collections::vec","",283,null],[11,"next_back","","",283,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"next","","",283,{"inputs":[{"name":"drain"}],"output":{"name":"option"}}],[11,"size_hint","","",283,null],[3,"Drain","bitflags::__core::vec","A draining iterator for `Vec&lt;T&gt;`.",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[8,"Error"],[8,"FnOnce"],[8,"AsMut"],[8,"FnMut"],[8,"Fn"],[8,"Ord"],[8,"Drop"],[8,"IntoIterator"],[8,"Default"],[8,"Iterator"],[4,"Result"],[8,"AsRef"],[8,"PartialOrd"],[3,"Vec"],[8,"ExactSizeIterator"],[8,"Into"],[8,"ToOwned"],[8,"DoubleEndedIterator"],[8,"Extend"],[8,"Clone"],[8,"SliceConcatExt"],[3,"String"],[4,"Option"],[8,"ToString"],[8,"From"],[8,"PartialEq"],[8,"AsciiExt"],[3,"EscapeDefault"],[8,"Zero"],[3,"ParseIntError"],[8,"One"],[3,"Wrapping"],[4,"FpCategory"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"Key"],[4,"LocalKeyState"],[3,"KeyInner"],[3,"LocalKey"],[3,"Key"],[3,"ScopedKey"],[4,"Entry"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"LinkedList"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"FrontPlace"],[3,"BackPlace"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Union"],[3,"SymmetricDifference"],[3,"BTreeSet"],[3,"Iter"],[3,"Difference"],[3,"Intersection"],[3,"IntoIter"],[3,"Range"],[3,"BTreeMap"],[3,"VacantEntry"],[3,"Keys"],[3,"IntoIter"],[4,"Entry"],[3,"OccupiedEntry"],[3,"RangeMut"],[3,"Values"],[3,"Iter"],[3,"Range"],[3,"IterMut"],[4,"Bound"],[4,"VarError"],[8,"BufRead"],[8,"Read"],[8,"Seek"],[8,"Write"],[4,"SeekFrom"],[4,"CharsError"],[4,"ErrorKind"],[4,"Shutdown"],[4,"Ipv6MulticastScope"],[4,"IpAddr"],[4,"SocketAddr"],[8,"ToSocketAddrs"],[3,"stat"],[8,"MetadataExt"],[8,"AsRawFd"],[8,"FromRawFd"],[8,"IntoRawFd"],[8,"OsStringExt"],[8,"OsStrExt"],[8,"PermissionsExt"],[8,"OpenOptionsExt"],[8,"MetadataExt"],[8,"FileTypeExt"],[8,"DirEntryExt"],[8,"DirBuilderExt"],[8,"CommandExt"],[8,"ExitStatusExt"],[8,"JoinHandleExt"],[3,"AssertRecoverSafe"],[4,"Prefix"],[4,"Component"],[3,"Child"],[3,"Output"],[3,"SendError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Arc"],[4,"TryLockError"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Weak"],[3,"Cell"],[3,"RefCell"],[4,"BorrowState"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[4,"Cow"],[8,"BorrowMut"],[8,"Borrow"],[8,"Any"],[3,"TypeId"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[3,"PhantomData"],[3,"EscapeUnicode"],[3,"EncodeUtf8"],[3,"EscapeDefault"],[3,"EncodeUtf16"],[8,"FnBox"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[3,"BuildHasherDefault"],[3,"SipHasher"],[3,"Unique"],[3,"Shared"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[8,"Repr"],[3,"Split"],[3,"Chunks"],[3,"RSplitNMut"],[3,"RSplitN"],[3,"SplitN"],[3,"Iter"],[3,"ChunksMut"],[3,"IterMut"],[3,"Windows"],[3,"SplitMut"],[3,"SplitNMut"],[3,"Arguments"],[8,"Debug"],[8,"Display"],[3,"DebugTuple"],[8,"LowerHex"],[3,"DebugList"],[8,"Binary"],[3,"DebugStruct"],[8,"LowerExp"],[8,"Octal"],[3,"DebugMap"],[8,"UpperExp"],[3,"Formatter"],[8,"Write"],[3,"Error"],[3,"DebugSet"],[8,"UpperHex"],[8,"Pointer"],[3,"Rc"],[3,"Weak"],[8,"FromIterator"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[8,"Step"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"EncodeUtf16"],[3,"RSplitN"],[3,"RSplit"],[3,"SplitWhitespace"],[3,"Chars"],[3,"MatchIndices"],[3,"ParseBoolError"],[3,"RSplitTerminator"],[3,"RMatches"],[3,"Matches"],[8,"Pattern"],[4,"SearchStep"],[8,"Searcher"],[8,"ReverseSearcher"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"SplitTerminator"],[3,"Lines"],[3,"CharIndices"],[3,"CharRange"],[3,"Split"],[3,"Bytes"],[3,"Utf8Error"],[3,"SplitN"],[3,"RMatchIndices"],[3,"LinesAny"],[8,"FromStr"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"Drain"],[4,"Ordering"],[3,"IntoIter"],[3,"Drain"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if!","cfg_if","",null,null]],"paths":[]};
searchIndex["httparse"] = {"doc":"# httparse","items":[[3,"InvalidChunkSize","httparse","An error in parsing a chunk size.",null,null],[3,"Request","","A parsed Request.",null,null],[12,"method","","The request method, such as `GET`.",0,null],[12,"path","","The request path, such as `/about-us`.",0,null],[12,"version","","The request version, such as `HTTP/1.1`.",0,null],[12,"headers","","The request headers.",0,null],[3,"Response","","A parsed Response.",null,null],[12,"version","","The response version, such as `HTTP/1.1`.",1,null],[12,"code","","The response code, such as `200`.",1,null],[12,"reason","","The response reason-phrase, such as `OK`.",1,null],[12,"headers","","THe response headers.",1,null],[3,"Header","","Represents a parsed header.",null,null],[12,"name","","The name portion of a header.",2,null],[12,"value","","The value portion of a header.",2,null],[4,"Error","","An error in parsing.",null,null],[13,"HeaderName","","Invalid byte in header name.",3,null],[13,"HeaderValue","","INvalid byte in header value.",3,null],[13,"NewLine","","Invalid byte in new line.",3,null],[13,"Status","","Invalid byte in Response status.",3,null],[13,"Token","","Invalid byte where token is required.",3,null],[13,"TooManyHeaders","","Parsed more headers than provided buffer can contain.",3,null],[13,"Version","","Invalid byte in HTTP version.",3,null],[4,"Status","","The result of a successful parse pass.",null,null],[13,"Complete","","The completed result.",4,null],[13,"Partial","","A partial result.",4,null],[5,"parse_headers","","Parse a buffer of bytes as headers.",null,null],[5,"parse_chunk_size","","Parse a buffer of bytes as a chunk size.",null,null],[6,"Result","","A Result of any parsing action.",null,null],[17,"EMPTY_HEADER","","An empty header, useful for constructing a `Header` array to pass in for\nparsing.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"invalidchunksize"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"invalidchunksize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"status"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"status"},{"name":"status"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"status"}],"output":{"name":"status"}}],[11,"is_complete","","Convenience method to check if status is complete.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"is_partial","","Convenience method to check if status is partial.",4,{"inputs":[{"name":"status"}],"output":{"name":"bool"}}],[11,"unwrap","","Convenience method to unwrap a Complete value. Panics if the status is\n`Partial`.",4,{"inputs":[{"name":"status"}],"output":{"name":"t"}}],[11,"new","","Creates a new Request, using a slice of headers you allocate.",0,null],[11,"parse","","Try to parse a buffer of bytes into the Request.",0,null],[11,"new","","Creates a new `Response` using a slice of `Header`s you have allocated.",1,null],[11,"parse","","Try to parse a buffer of bytes into this `Response`.",1,null],[11,"fmt","","",2,{"inputs":[{"name":"header"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"header"},{"name":"header"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"header"}],"output":{"name":"header"}}]],"paths":[[3,"Request"],[3,"Response"],[3,"Header"],[4,"Error"],[4,"Status"],[3,"InvalidChunkSize"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
initSearch(searchIndex);
